// Code generated by protoc-gen-go. DO NOT EDIT.
// source: s2clientprotocol/debug.proto

/*
Package sc2apiprotocol is a generated protocol buffer package.

It is generated from these files:
	s2clientprotocol/debug.proto

It has these top-level messages:
	DebugCommand
	DebugDraw
	Line
	Color
	DebugText
	DebugLine
	DebugBox
	DebugSphere
	DebugCreateUnit
	DebugKillUnit
	DebugTestProcess
	DebugSetScore
	DebugEndGame
	DebugSetUnitValue
*/
package sc2apiprotocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DebugGameState int32

const (
	DebugGameState_show_map      DebugGameState = 1
	DebugGameState_control_enemy DebugGameState = 2
	DebugGameState_food          DebugGameState = 3
	DebugGameState_free          DebugGameState = 4
	DebugGameState_all_resources DebugGameState = 5
	DebugGameState_god           DebugGameState = 6
	DebugGameState_minerals      DebugGameState = 7
	DebugGameState_gas           DebugGameState = 8
	DebugGameState_cooldown      DebugGameState = 9
	DebugGameState_tech_tree     DebugGameState = 10
	DebugGameState_upgrade       DebugGameState = 11
	DebugGameState_fast_build    DebugGameState = 12
)

var DebugGameState_name = map[int32]string{
	1:  "show_map",
	2:  "control_enemy",
	3:  "food",
	4:  "free",
	5:  "all_resources",
	6:  "god",
	7:  "minerals",
	8:  "gas",
	9:  "cooldown",
	10: "tech_tree",
	11: "upgrade",
	12: "fast_build",
}
var DebugGameState_value = map[string]int32{
	"show_map":      1,
	"control_enemy": 2,
	"food":          3,
	"free":          4,
	"all_resources": 5,
	"god":           6,
	"minerals":      7,
	"gas":           8,
	"cooldown":      9,
	"tech_tree":     10,
	"upgrade":       11,
	"fast_build":    12,
}

func (x DebugGameState) Enum() *DebugGameState {
	p := new(DebugGameState)
	*p = x
	return p
}
func (x DebugGameState) String() string {
	return proto.EnumName(DebugGameState_name, int32(x))
}
func (x *DebugGameState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DebugGameState_value, data, "DebugGameState")
	if err != nil {
		return err
	}
	*x = DebugGameState(value)
	return nil
}
func (DebugGameState) EnumDescriptor() ([]byte, []int) { return fileDescriptorDebug, []int{0} }

type DebugTestProcess_Test int32

const (
	DebugTestProcess_hang  DebugTestProcess_Test = 1
	DebugTestProcess_crash DebugTestProcess_Test = 2
	DebugTestProcess_exit  DebugTestProcess_Test = 3
)

var DebugTestProcess_Test_name = map[int32]string{
	1: "hang",
	2: "crash",
	3: "exit",
}
var DebugTestProcess_Test_value = map[string]int32{
	"hang":  1,
	"crash": 2,
	"exit":  3,
}

func (x DebugTestProcess_Test) Enum() *DebugTestProcess_Test {
	p := new(DebugTestProcess_Test)
	*p = x
	return p
}
func (x DebugTestProcess_Test) String() string {
	return proto.EnumName(DebugTestProcess_Test_name, int32(x))
}
func (x *DebugTestProcess_Test) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DebugTestProcess_Test_value, data, "DebugTestProcess_Test")
	if err != nil {
		return err
	}
	*x = DebugTestProcess_Test(value)
	return nil
}
func (DebugTestProcess_Test) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDebug, []int{10, 0}
}

type DebugEndGame_EndResult int32

const (
	DebugEndGame_Surrender      DebugEndGame_EndResult = 1
	DebugEndGame_DeclareVictory DebugEndGame_EndResult = 2
)

var DebugEndGame_EndResult_name = map[int32]string{
	1: "Surrender",
	2: "DeclareVictory",
}
var DebugEndGame_EndResult_value = map[string]int32{
	"Surrender":      1,
	"DeclareVictory": 2,
}

func (x DebugEndGame_EndResult) Enum() *DebugEndGame_EndResult {
	p := new(DebugEndGame_EndResult)
	*p = x
	return p
}
func (x DebugEndGame_EndResult) String() string {
	return proto.EnumName(DebugEndGame_EndResult_name, int32(x))
}
func (x *DebugEndGame_EndResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DebugEndGame_EndResult_value, data, "DebugEndGame_EndResult")
	if err != nil {
		return err
	}
	*x = DebugEndGame_EndResult(value)
	return nil
}
func (DebugEndGame_EndResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDebug, []int{12, 0}
}

type DebugSetUnitValue_UnitValue int32

const (
	DebugSetUnitValue_Energy  DebugSetUnitValue_UnitValue = 1
	DebugSetUnitValue_Life    DebugSetUnitValue_UnitValue = 2
	DebugSetUnitValue_Shields DebugSetUnitValue_UnitValue = 3
)

var DebugSetUnitValue_UnitValue_name = map[int32]string{
	1: "Energy",
	2: "Life",
	3: "Shields",
}
var DebugSetUnitValue_UnitValue_value = map[string]int32{
	"Energy":  1,
	"Life":    2,
	"Shields": 3,
}

func (x DebugSetUnitValue_UnitValue) Enum() *DebugSetUnitValue_UnitValue {
	p := new(DebugSetUnitValue_UnitValue)
	*p = x
	return p
}
func (x DebugSetUnitValue_UnitValue) String() string {
	return proto.EnumName(DebugSetUnitValue_UnitValue_name, int32(x))
}
func (x *DebugSetUnitValue_UnitValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DebugSetUnitValue_UnitValue_value, data, "DebugSetUnitValue_UnitValue")
	if err != nil {
		return err
	}
	*x = DebugSetUnitValue_UnitValue(value)
	return nil
}
func (DebugSetUnitValue_UnitValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorDebug, []int{13, 0}
}

// Issue various useful commands to the game engine.
type DebugCommand struct {
	// Types that are valid to be assigned to Command:
	//	*DebugCommand_Draw
	//	*DebugCommand_GameState
	//	*DebugCommand_CreateUnit
	//	*DebugCommand_KillUnit
	//	*DebugCommand_TestProcess
	//	*DebugCommand_Score
	//	*DebugCommand_EndGame
	//	*DebugCommand_UnitValue
	Command          isDebugCommand_Command `protobuf_oneof:"command"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *DebugCommand) Reset()                    { *m = DebugCommand{} }
func (m *DebugCommand) String() string            { return proto.CompactTextString(m) }
func (*DebugCommand) ProtoMessage()               {}
func (*DebugCommand) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{0} }

type isDebugCommand_Command interface {
	isDebugCommand_Command()
}

type DebugCommand_Draw struct {
	Draw *DebugDraw `protobuf:"bytes,1,opt,name=draw,oneof"`
}
type DebugCommand_GameState struct {
	GameState DebugGameState `protobuf:"varint,2,opt,name=game_state,json=gameState,enum=DebugGameState,oneof"`
}
type DebugCommand_CreateUnit struct {
	CreateUnit *DebugCreateUnit `protobuf:"bytes,3,opt,name=create_unit,json=createUnit,oneof"`
}
type DebugCommand_KillUnit struct {
	KillUnit *DebugKillUnit `protobuf:"bytes,4,opt,name=kill_unit,json=killUnit,oneof"`
}
type DebugCommand_TestProcess struct {
	TestProcess *DebugTestProcess `protobuf:"bytes,5,opt,name=test_process,json=testProcess,oneof"`
}
type DebugCommand_Score struct {
	Score *DebugSetScore `protobuf:"bytes,6,opt,name=score,oneof"`
}
type DebugCommand_EndGame struct {
	EndGame *DebugEndGame `protobuf:"bytes,7,opt,name=end_game,json=endGame,oneof"`
}
type DebugCommand_UnitValue struct {
	UnitValue *DebugSetUnitValue `protobuf:"bytes,8,opt,name=unit_value,json=unitValue,oneof"`
}

func (*DebugCommand_Draw) isDebugCommand_Command()        {}
func (*DebugCommand_GameState) isDebugCommand_Command()   {}
func (*DebugCommand_CreateUnit) isDebugCommand_Command()  {}
func (*DebugCommand_KillUnit) isDebugCommand_Command()    {}
func (*DebugCommand_TestProcess) isDebugCommand_Command() {}
func (*DebugCommand_Score) isDebugCommand_Command()       {}
func (*DebugCommand_EndGame) isDebugCommand_Command()     {}
func (*DebugCommand_UnitValue) isDebugCommand_Command()   {}

func (m *DebugCommand) GetCommand() isDebugCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *DebugCommand) GetDraw() *DebugDraw {
	if x, ok := m.GetCommand().(*DebugCommand_Draw); ok {
		return x.Draw
	}
	return nil
}

func (m *DebugCommand) GetGameState() DebugGameState {
	if x, ok := m.GetCommand().(*DebugCommand_GameState); ok {
		return x.GameState
	}
	return DebugGameState_show_map
}

func (m *DebugCommand) GetCreateUnit() *DebugCreateUnit {
	if x, ok := m.GetCommand().(*DebugCommand_CreateUnit); ok {
		return x.CreateUnit
	}
	return nil
}

func (m *DebugCommand) GetKillUnit() *DebugKillUnit {
	if x, ok := m.GetCommand().(*DebugCommand_KillUnit); ok {
		return x.KillUnit
	}
	return nil
}

func (m *DebugCommand) GetTestProcess() *DebugTestProcess {
	if x, ok := m.GetCommand().(*DebugCommand_TestProcess); ok {
		return x.TestProcess
	}
	return nil
}

func (m *DebugCommand) GetScore() *DebugSetScore {
	if x, ok := m.GetCommand().(*DebugCommand_Score); ok {
		return x.Score
	}
	return nil
}

func (m *DebugCommand) GetEndGame() *DebugEndGame {
	if x, ok := m.GetCommand().(*DebugCommand_EndGame); ok {
		return x.EndGame
	}
	return nil
}

func (m *DebugCommand) GetUnitValue() *DebugSetUnitValue {
	if x, ok := m.GetCommand().(*DebugCommand_UnitValue); ok {
		return x.UnitValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DebugCommand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DebugCommand_OneofMarshaler, _DebugCommand_OneofUnmarshaler, _DebugCommand_OneofSizer, []interface{}{
		(*DebugCommand_Draw)(nil),
		(*DebugCommand_GameState)(nil),
		(*DebugCommand_CreateUnit)(nil),
		(*DebugCommand_KillUnit)(nil),
		(*DebugCommand_TestProcess)(nil),
		(*DebugCommand_Score)(nil),
		(*DebugCommand_EndGame)(nil),
		(*DebugCommand_UnitValue)(nil),
	}
}

func _DebugCommand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DebugCommand)
	// command
	switch x := m.Command.(type) {
	case *DebugCommand_Draw:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Draw); err != nil {
			return err
		}
	case *DebugCommand_GameState:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.GameState))
	case *DebugCommand_CreateUnit:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateUnit); err != nil {
			return err
		}
	case *DebugCommand_KillUnit:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KillUnit); err != nil {
			return err
		}
	case *DebugCommand_TestProcess:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TestProcess); err != nil {
			return err
		}
	case *DebugCommand_Score:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Score); err != nil {
			return err
		}
	case *DebugCommand_EndGame:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EndGame); err != nil {
			return err
		}
	case *DebugCommand_UnitValue:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnitValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DebugCommand.Command has unexpected type %T", x)
	}
	return nil
}

func _DebugCommand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DebugCommand)
	switch tag {
	case 1: // command.draw
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebugDraw)
		err := b.DecodeMessage(msg)
		m.Command = &DebugCommand_Draw{msg}
		return true, err
	case 2: // command.game_state
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Command = &DebugCommand_GameState{DebugGameState(x)}
		return true, err
	case 3: // command.create_unit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebugCreateUnit)
		err := b.DecodeMessage(msg)
		m.Command = &DebugCommand_CreateUnit{msg}
		return true, err
	case 4: // command.kill_unit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebugKillUnit)
		err := b.DecodeMessage(msg)
		m.Command = &DebugCommand_KillUnit{msg}
		return true, err
	case 5: // command.test_process
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebugTestProcess)
		err := b.DecodeMessage(msg)
		m.Command = &DebugCommand_TestProcess{msg}
		return true, err
	case 6: // command.score
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebugSetScore)
		err := b.DecodeMessage(msg)
		m.Command = &DebugCommand_Score{msg}
		return true, err
	case 7: // command.end_game
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebugEndGame)
		err := b.DecodeMessage(msg)
		m.Command = &DebugCommand_EndGame{msg}
		return true, err
	case 8: // command.unit_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DebugSetUnitValue)
		err := b.DecodeMessage(msg)
		m.Command = &DebugCommand_UnitValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DebugCommand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DebugCommand)
	// command
	switch x := m.Command.(type) {
	case *DebugCommand_Draw:
		s := proto.Size(x.Draw)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugCommand_GameState:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.GameState))
	case *DebugCommand_CreateUnit:
		s := proto.Size(x.CreateUnit)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugCommand_KillUnit:
		s := proto.Size(x.KillUnit)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugCommand_TestProcess:
		s := proto.Size(x.TestProcess)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugCommand_Score:
		s := proto.Size(x.Score)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugCommand_EndGame:
		s := proto.Size(x.EndGame)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DebugCommand_UnitValue:
		s := proto.Size(x.UnitValue)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DebugDraw struct {
	Text             []*DebugText   `protobuf:"bytes,1,rep,name=text" json:"text,omitempty"`
	Lines            []*DebugLine   `protobuf:"bytes,2,rep,name=lines" json:"lines,omitempty"`
	Boxes            []*DebugBox    `protobuf:"bytes,3,rep,name=boxes" json:"boxes,omitempty"`
	Spheres          []*DebugSphere `protobuf:"bytes,4,rep,name=spheres" json:"spheres,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *DebugDraw) Reset()                    { *m = DebugDraw{} }
func (m *DebugDraw) String() string            { return proto.CompactTextString(m) }
func (*DebugDraw) ProtoMessage()               {}
func (*DebugDraw) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{1} }

func (m *DebugDraw) GetText() []*DebugText {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *DebugDraw) GetLines() []*DebugLine {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *DebugDraw) GetBoxes() []*DebugBox {
	if m != nil {
		return m.Boxes
	}
	return nil
}

func (m *DebugDraw) GetSpheres() []*DebugSphere {
	if m != nil {
		return m.Spheres
	}
	return nil
}

type Line struct {
	P0               *Point `protobuf:"bytes,1,opt,name=p0" json:"p0,omitempty"`
	P1               *Point `protobuf:"bytes,2,opt,name=p1" json:"p1,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Line) Reset()                    { *m = Line{} }
func (m *Line) String() string            { return proto.CompactTextString(m) }
func (*Line) ProtoMessage()               {}
func (*Line) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{2} }

func (m *Line) GetP0() *Point {
	if m != nil {
		return m.P0
	}
	return nil
}

func (m *Line) GetP1() *Point {
	if m != nil {
		return m.P1
	}
	return nil
}

type Color struct {
	R                uint32 `protobuf:"varint,1,opt,name=r" json:"r,omitempty"`
	G                uint32 `protobuf:"varint,2,opt,name=g" json:"g,omitempty"`
	B                uint32 `protobuf:"varint,3,opt,name=b" json:"b,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{3} }

func (m *Color) GetR() uint32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *Color) GetG() uint32 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *Color) GetB() uint32 {
	if m != nil {
		return m.B
	}
	return 0
}

// Display debug text on screen.
type DebugText struct {
	Color            *Color `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	Text             string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	VirtualPos       *Point `protobuf:"bytes,3,opt,name=virtual_pos,json=virtualPos" json:"virtual_pos,omitempty"`
	WorldPos         *Point `protobuf:"bytes,4,opt,name=world_pos,json=worldPos" json:"world_pos,omitempty"`
	Size             uint32 `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugText) Reset()                    { *m = DebugText{} }
func (m *DebugText) String() string            { return proto.CompactTextString(m) }
func (*DebugText) ProtoMessage()               {}
func (*DebugText) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{4} }

func (m *DebugText) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *DebugText) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *DebugText) GetVirtualPos() *Point {
	if m != nil {
		return m.VirtualPos
	}
	return nil
}

func (m *DebugText) GetWorldPos() *Point {
	if m != nil {
		return m.WorldPos
	}
	return nil
}

func (m *DebugText) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

// Display debug lines on screen.
type DebugLine struct {
	Color            *Color `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	Line             *Line  `protobuf:"bytes,2,opt,name=line" json:"line,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugLine) Reset()                    { *m = DebugLine{} }
func (m *DebugLine) String() string            { return proto.CompactTextString(m) }
func (*DebugLine) ProtoMessage()               {}
func (*DebugLine) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{5} }

func (m *DebugLine) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *DebugLine) GetLine() *Line {
	if m != nil {
		return m.Line
	}
	return nil
}

// Display debug boxes on screen.
type DebugBox struct {
	Color            *Color `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	Min              *Point `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
	Max              *Point `protobuf:"bytes,3,opt,name=max" json:"max,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DebugBox) Reset()                    { *m = DebugBox{} }
func (m *DebugBox) String() string            { return proto.CompactTextString(m) }
func (*DebugBox) ProtoMessage()               {}
func (*DebugBox) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{6} }

func (m *DebugBox) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *DebugBox) GetMin() *Point {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *DebugBox) GetMax() *Point {
	if m != nil {
		return m.Max
	}
	return nil
}

// Display debug spheres on screen.
type DebugSphere struct {
	Color            *Color  `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	P                *Point  `protobuf:"bytes,2,opt,name=p" json:"p,omitempty"`
	R                float32 `protobuf:"fixed32,3,opt,name=r" json:"r,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DebugSphere) Reset()                    { *m = DebugSphere{} }
func (m *DebugSphere) String() string            { return proto.CompactTextString(m) }
func (*DebugSphere) ProtoMessage()               {}
func (*DebugSphere) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{7} }

func (m *DebugSphere) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *DebugSphere) GetP() *Point {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *DebugSphere) GetR() float32 {
	if m != nil {
		return m.R
	}
	return 0
}

type DebugCreateUnit struct {
	UnitType         uint32   `protobuf:"varint,1,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
	Owner            int32    `protobuf:"varint,2,opt,name=owner" json:"owner,omitempty"`
	Pos              *Point2D `protobuf:"bytes,3,opt,name=pos" json:"pos,omitempty"`
	Quantity         uint32   `protobuf:"varint,4,opt,name=quantity" json:"quantity,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DebugCreateUnit) Reset()                    { *m = DebugCreateUnit{} }
func (m *DebugCreateUnit) String() string            { return proto.CompactTextString(m) }
func (*DebugCreateUnit) ProtoMessage()               {}
func (*DebugCreateUnit) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{8} }

func (m *DebugCreateUnit) GetUnitType() uint32 {
	if m != nil {
		return m.UnitType
	}
	return 0
}

func (m *DebugCreateUnit) GetOwner() int32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *DebugCreateUnit) GetPos() *Point2D {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *DebugCreateUnit) GetQuantity() uint32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type DebugKillUnit struct {
	Tag              []uint64 `protobuf:"varint,1,rep,name=tag" json:"tag,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DebugKillUnit) Reset()                    { *m = DebugKillUnit{} }
func (m *DebugKillUnit) String() string            { return proto.CompactTextString(m) }
func (*DebugKillUnit) ProtoMessage()               {}
func (*DebugKillUnit) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{9} }

func (m *DebugKillUnit) GetTag() []uint64 {
	if m != nil {
		return m.Tag
	}
	return nil
}

type DebugTestProcess struct {
	Test             DebugTestProcess_Test `protobuf:"varint,1,opt,name=test,enum=DebugTestProcess_Test" json:"test,omitempty"`
	DelayMs          int32                 `protobuf:"varint,2,opt,name=delay_ms,json=delayMs" json:"delay_ms,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *DebugTestProcess) Reset()                    { *m = DebugTestProcess{} }
func (m *DebugTestProcess) String() string            { return proto.CompactTextString(m) }
func (*DebugTestProcess) ProtoMessage()               {}
func (*DebugTestProcess) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{10} }

func (m *DebugTestProcess) GetTest() DebugTestProcess_Test {
	if m != nil {
		return m.Test
	}
	return DebugTestProcess_hang
}

func (m *DebugTestProcess) GetDelayMs() int32 {
	if m != nil {
		return m.DelayMs
	}
	return 0
}

type DebugSetScore struct {
	Score            float32 `protobuf:"fixed32,1,opt,name=score" json:"score,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DebugSetScore) Reset()                    { *m = DebugSetScore{} }
func (m *DebugSetScore) String() string            { return proto.CompactTextString(m) }
func (*DebugSetScore) ProtoMessage()               {}
func (*DebugSetScore) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{11} }

func (m *DebugSetScore) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type DebugEndGame struct {
	EndResult        DebugEndGame_EndResult `protobuf:"varint,1,opt,name=end_result,json=endResult,enum=DebugEndGame_EndResult" json:"end_result,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *DebugEndGame) Reset()                    { *m = DebugEndGame{} }
func (m *DebugEndGame) String() string            { return proto.CompactTextString(m) }
func (*DebugEndGame) ProtoMessage()               {}
func (*DebugEndGame) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{12} }

func (m *DebugEndGame) GetEndResult() DebugEndGame_EndResult {
	if m != nil {
		return m.EndResult
	}
	return DebugEndGame_Surrender
}

type DebugSetUnitValue struct {
	UnitValue        DebugSetUnitValue_UnitValue `protobuf:"varint,1,opt,name=unit_value,json=unitValue,enum=DebugSetUnitValue_UnitValue" json:"unit_value,omitempty"`
	Value            float32                     `protobuf:"fixed32,2,opt,name=value" json:"value,omitempty"`
	UnitTag          uint64                      `protobuf:"varint,3,opt,name=unit_tag,json=unitTag" json:"unit_tag,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *DebugSetUnitValue) Reset()                    { *m = DebugSetUnitValue{} }
func (m *DebugSetUnitValue) String() string            { return proto.CompactTextString(m) }
func (*DebugSetUnitValue) ProtoMessage()               {}
func (*DebugSetUnitValue) Descriptor() ([]byte, []int) { return fileDescriptorDebug, []int{13} }

func (m *DebugSetUnitValue) GetUnitValue() DebugSetUnitValue_UnitValue {
	if m != nil {
		return m.UnitValue
	}
	return DebugSetUnitValue_Energy
}

func (m *DebugSetUnitValue) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DebugSetUnitValue) GetUnitTag() uint64 {
	if m != nil {
		return m.UnitTag
	}
	return 0
}

func init() {
	proto.RegisterType((*DebugCommand)(nil), "DebugCommand")
	proto.RegisterType((*DebugDraw)(nil), "DebugDraw")
	proto.RegisterType((*Line)(nil), "Line")
	proto.RegisterType((*Color)(nil), "Color")
	proto.RegisterType((*DebugText)(nil), "DebugText")
	proto.RegisterType((*DebugLine)(nil), "DebugLine")
	proto.RegisterType((*DebugBox)(nil), "DebugBox")
	proto.RegisterType((*DebugSphere)(nil), "DebugSphere")
	proto.RegisterType((*DebugCreateUnit)(nil), "DebugCreateUnit")
	proto.RegisterType((*DebugKillUnit)(nil), "DebugKillUnit")
	proto.RegisterType((*DebugTestProcess)(nil), "DebugTestProcess")
	proto.RegisterType((*DebugSetScore)(nil), "DebugSetScore")
	proto.RegisterType((*DebugEndGame)(nil), "DebugEndGame")
	proto.RegisterType((*DebugSetUnitValue)(nil), "DebugSetUnitValue")
	proto.RegisterEnum("DebugGameState", DebugGameState_name, DebugGameState_value)
	proto.RegisterEnum("DebugTestProcess_Test", DebugTestProcess_Test_name, DebugTestProcess_Test_value)
	proto.RegisterEnum("DebugEndGame_EndResult", DebugEndGame_EndResult_name, DebugEndGame_EndResult_value)
	proto.RegisterEnum("DebugSetUnitValue_UnitValue", DebugSetUnitValue_UnitValue_name, DebugSetUnitValue_UnitValue_value)
}

func init() { proto.RegisterFile("s2clientprotocol/debug.proto", fileDescriptorDebug) }

var fileDescriptorDebug = []byte{
	// 1038 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x95, 0xdb, 0x8e, 0xe3, 0x44,
	0x13, 0xc7, 0xd3, 0x89, 0xb3, 0x49, 0x2a, 0x93, 0xf9, 0xbc, 0xad, 0xfd, 0x84, 0xf7, 0x04, 0xb3,
	0x46, 0x03, 0x0b, 0x2b, 0x32, 0x3b, 0x91, 0x16, 0x69, 0x25, 0x24, 0xc4, 0x1c, 0x44, 0x80, 0x45,
	0x1a, 0x75, 0x86, 0xbd, 0xb5, 0x3a, 0x76, 0x8d, 0x63, 0xad, 0xed, 0x36, 0xdd, 0xed, 0x4d, 0xc2,
	0x3d, 0x17, 0xc0, 0x05, 0xef, 0xc2, 0x13, 0xf0, 0x00, 0x5c, 0xf1, 0x44, 0xa8, 0xdb, 0xce, 0x9c,
	0x36, 0x93, 0xd5, 0xdc, 0x55, 0x75, 0x7e, 0x55, 0x5d, 0x55, 0xfd, 0x77, 0x05, 0x1e, 0xa9, 0x51,
	0x98, 0x26, 0x98, 0xeb, 0x42, 0x0a, 0x2d, 0x42, 0x91, 0xee, 0x45, 0x38, 0x2d, 0xe3, 0xa1, 0x75,
	0xe9, 0xf6, 0xe4, 0x70, 0xf4, 0xcd, 0xc9, 0x77, 0x27, 0xf5, 0x6f, 0x0f, 0x1e, 0xbf, 0x43, 0x87,
	0x22, 0xcb, 0x44, 0x5e, 0xe1, 0xfe, 0xef, 0x0e, 0x6c, 0x1d, 0x99, 0xf0, 0x43, 0x91, 0x65, 0x3c,
	0x8f, 0xe8, 0x1e, 0x38, 0x91, 0xe4, 0x73, 0x8f, 0xec, 0x90, 0xa7, 0xfd, 0xd1, 0xfd, 0xe1, 0xd5,
	0x74, 0x43, 0xcb, 0x1e, 0x49, 0x3e, 0x1f, 0x37, 0x98, 0x05, 0xe9, 0xd7, 0x00, 0x31, 0xcf, 0x30,
	0x50, 0x9a, 0x6b, 0xf4, 0x9a, 0x3b, 0xe4, 0xe9, 0xf6, 0xe8, 0xc3, 0xb5, 0x61, 0xdf, 0xf2, 0x0c,
	0x27, 0x86, 0x1a, 0x37, 0x58, 0x2f, 0x5e, 0x39, 0xf4, 0x00, 0xfa, 0xa1, 0x44, 0xae, 0x31, 0x28,
	0xf3, 0x44, 0x7b, 0x2d, 0x7b, 0xf1, 0x47, 0x6b, 0x33, 0x1c, 0x5a, 0xee, 0xa7, 0x3c, 0xd1, 0xe3,
	0x06, 0x83, 0xf0, 0xdc, 0xa3, 0x5f, 0x41, 0xef, 0x4d, 0x92, 0xa6, 0x55, 0x06, 0xc7, 0x66, 0x78,
	0xbc, 0x36, 0xc3, 0x0f, 0x49, 0x9a, 0xd6, 0xf1, 0xdd, 0x37, 0xb5, 0x4d, 0x8f, 0x61, 0x4b, 0xa3,
	0xd2, 0x41, 0x21, 0x45, 0x88, 0x4a, 0x79, 0x6d, 0x9b, 0x60, 0x67, 0x6d, 0x82, 0x53, 0x54, 0xfa,
	0xa4, 0xe2, 0xc6, 0x0d, 0xd6, 0xd7, 0x17, 0x2e, 0x7d, 0x01, 0x6d, 0x15, 0x0a, 0x89, 0xde, 0x9d,
	0x0d, 0x05, 0x4c, 0x50, 0x4f, 0x0c, 0x34, 0x6e, 0xb0, 0x8a, 0xa6, 0x2f, 0xa1, 0x8b, 0x79, 0x14,
	0x98, 0x81, 0x78, 0x1d, 0x1b, 0xf9, 0x68, 0x6d, 0xe4, 0x71, 0x1e, 0x99, 0x09, 0x8e, 0x1b, 0xac,
	0x83, 0x95, 0x49, 0x0f, 0x00, 0x4c, 0xc7, 0xc1, 0x5b, 0x9e, 0x96, 0xe8, 0x75, 0x6d, 0xf0, 0x93,
	0x9b, 0xae, 0x35, 0xad, 0xbe, 0x36, 0xa0, 0x19, 0x7f, 0xb9, 0x72, 0x0e, 0x7a, 0xd0, 0x09, 0xab,
	0xb7, 0xf7, 0xff, 0x25, 0xd0, 0x3b, 0x7f, 0x60, 0xfa, 0x05, 0x38, 0x1a, 0x17, 0xda, 0x23, 0x3b,
	0xad, 0x1b, 0x95, 0x70, 0x8a, 0x0b, 0xcd, 0x2c, 0x46, 0xf7, 0xa0, 0x9d, 0x26, 0x39, 0x2a, 0xaf,
	0xb9, 0x81, 0x7f, 0x95, 0xe4, 0xc8, 0x2a, 0x8e, 0x0e, 0xa1, 0x3d, 0x15, 0x0b, 0x54, 0x5e, 0xcb,
	0x06, 0x78, 0x6b, 0x03, 0x0e, 0xc4, 0x82, 0x55, 0x18, 0x7d, 0x01, 0x1d, 0x55, 0xcc, 0x50, 0xa2,
	0xf2, 0x1c, 0x1b, 0xf1, 0x70, 0x7d, 0xa7, 0x96, 0x61, 0x2b, 0xd6, 0x3f, 0x05, 0xc7, 0xdc, 0x4a,
	0x77, 0xa1, 0x59, 0x3c, 0xaf, 0x65, 0xfd, 0xff, 0xeb, 0x91, 0x27, 0x22, 0xc9, 0x35, 0x6b, 0x16,
	0xcf, 0x2d, 0xb6, 0x6f, 0x65, 0xbc, 0x01, 0xdb, 0xf7, 0xf7, 0xa1, 0x7d, 0x28, 0x52, 0x21, 0xe9,
	0x16, 0x10, 0x69, 0xb3, 0x0e, 0x18, 0xb1, 0x5e, 0x6c, 0x83, 0x07, 0x8c, 0xc4, 0xc6, 0x9b, 0x5a,
	0x3d, 0x0f, 0x18, 0x99, 0xfa, 0xff, 0xac, 0xa6, 0x6b, 0x86, 0x46, 0x9f, 0x41, 0x3b, 0x34, 0x09,
	0x6e, 0xaa, 0xc8, 0x66, 0x67, 0x15, 0x43, 0x69, 0xfd, 0x14, 0x26, 0x73, 0xaf, 0x9e, 0xf7, 0x97,
	0xd0, 0x7f, 0x9b, 0x48, 0x5d, 0xf2, 0x34, 0x28, 0x84, 0xaa, 0x3f, 0x9b, 0x1b, 0x2a, 0x86, 0x9a,
	0x3c, 0x11, 0x8a, 0x8e, 0xa0, 0x37, 0x17, 0x32, 0x8d, 0x6c, 0x94, 0xb3, 0x29, 0xaa, 0x6b, 0x39,
	0x13, 0x43, 0xc1, 0x51, 0xc9, 0x2f, 0x68, 0x3f, 0x8c, 0x01, 0xb3, 0xb6, 0x3f, 0xad, 0xbb, 0xb1,
	0xc3, 0xbd, 0x55, 0x37, 0x4f, 0xc1, 0x31, 0x0a, 0xa8, 0x87, 0x7c, 0xef, 0x3a, 0x6b, 0x35, 0x62,
	0x09, 0xff, 0x37, 0x02, 0xdd, 0x95, 0x0c, 0x6e, 0x77, 0xc7, 0xa7, 0xd0, 0xca, 0x92, 0x7c, 0xf3,
	0x3b, 0x1a, 0xc2, 0x82, 0x7c, 0xb1, 0x79, 0x7c, 0x86, 0xf0, 0x33, 0xe8, 0x5f, 0xd2, 0xd7, 0xed,
	0xaa, 0xf9, 0x18, 0x48, 0xb1, 0xb9, 0x16, 0x52, 0x54, 0x4a, 0x32, 0x75, 0x34, 0x19, 0x91, 0xfe,
	0x1f, 0x04, 0xfe, 0x77, 0x6d, 0xe7, 0xd1, 0x87, 0x60, 0xbf, 0xdb, 0x40, 0x2f, 0x0b, 0xac, 0x35,
	0xd7, 0x35, 0x07, 0xa7, 0xcb, 0x02, 0xe9, 0x3d, 0x68, 0x8b, 0x79, 0x8e, 0xd2, 0xde, 0xd3, 0x66,
	0x95, 0x43, 0x3f, 0x83, 0xd6, 0x85, 0x3a, 0x3e, 0x58, 0x7b, 0xf7, 0xe8, 0x88, 0x19, 0x86, 0x3e,
	0x80, 0xee, 0xcf, 0x25, 0xcf, 0x75, 0xa2, 0x97, 0x56, 0x17, 0x03, 0x76, 0xee, 0xfb, 0x4f, 0x60,
	0x70, 0x65, 0x7d, 0x52, 0x17, 0x5a, 0x9a, 0xc7, 0x76, 0x37, 0x38, 0xcc, 0x98, 0xfe, 0x9f, 0x04,
	0xdc, 0xeb, 0x1b, 0x92, 0xbe, 0x34, 0xc2, 0x55, 0xda, 0x16, 0xbb, 0x3d, 0xda, 0x7d, 0xdf, 0x46,
	0x1d, 0x1a, 0x9b, 0xd9, 0x10, 0x7a, 0x1f, 0xba, 0x11, 0xa6, 0x7c, 0x19, 0x64, 0xaa, 0x6e, 0xa9,
	0x63, 0xfd, 0x1f, 0x95, 0xbf, 0x0b, 0x8e, 0x01, 0x69, 0x17, 0x9c, 0x19, 0xcf, 0x63, 0x97, 0xd0,
	0x1e, 0xb4, 0x43, 0xc9, 0xd5, 0xcc, 0x6d, 0x9a, 0x43, 0x5c, 0x24, 0xda, 0x6d, 0xf9, 0xbb, 0x75,
	0xd1, 0xab, 0x95, 0x6b, 0x46, 0x54, 0x2d, 0x68, 0x62, 0xa7, 0x5c, 0x39, 0xfe, 0xaf, 0xa4, 0xfe,
	0x0b, 0xac, 0x17, 0x2c, 0x3d, 0x06, 0x30, 0x0b, 0x59, 0xa2, 0x2a, 0xd3, 0x55, 0xe9, 0x9f, 0x6c,
	0x5a, 0xc9, 0xc3, 0xe3, 0x3c, 0x62, 0x96, 0x66, 0x3d, 0x5c, 0x99, 0xfe, 0x10, 0x7a, 0xe7, 0xe7,
	0x74, 0x00, 0xbd, 0x49, 0x29, 0x25, 0xe6, 0x11, 0x4a, 0x97, 0x50, 0x0a, 0xdb, 0x47, 0x18, 0xa6,
	0x5c, 0xe2, 0xeb, 0x24, 0xd4, 0x42, 0x2e, 0xdd, 0xa6, 0xff, 0x37, 0x81, 0xbb, 0xef, 0xec, 0x6a,
	0xfa, 0xfd, 0x95, 0x15, 0x5f, 0x15, 0xf3, 0xec, 0xbd, 0x2b, 0x7e, 0x78, 0x6e, 0x5d, 0x5a, 0xf5,
	0xa6, 0xff, 0x2a, 0x4d, 0xb3, 0xea, 0xdf, 0x3a, 0x66, 0xd0, 0x95, 0xaa, 0x78, 0x6c, 0x75, 0xe2,
	0xb0, 0x8e, 0x15, 0x15, 0x8f, 0x4d, 0x0b, 0x17, 0x95, 0x00, 0xdc, 0x39, 0xce, 0x51, 0xc6, 0x4b,
	0x97, 0x98, 0x21, 0xbf, 0x4a, 0xce, 0xd0, 0x6d, 0xd2, 0x3e, 0x74, 0x26, 0xb3, 0x04, 0xd3, 0x48,
	0xb9, 0xad, 0xcf, 0xff, 0x22, 0xa6, 0xaf, 0xcb, 0x7f, 0xf5, 0x74, 0x0b, 0xba, 0x6a, 0x26, 0xe6,
	0x41, 0xc6, 0x0b, 0x97, 0xd0, 0xbb, 0x30, 0x08, 0x45, 0xae, 0xa5, 0x48, 0x03, 0xcc, 0x31, 0x5b,
	0x56, 0xef, 0x75, 0x26, 0x44, 0xe4, 0xb6, 0xac, 0x25, 0x11, 0x5d, 0xc7, 0x60, 0x3c, 0x4d, 0xcd,
	0x0b, 0x88, 0x52, 0x86, 0xa8, 0xdc, 0x36, 0xed, 0x40, 0x2b, 0x16, 0x91, 0x7b, 0xc7, 0x24, 0xcc,
	0x92, 0x1c, 0x25, 0x4f, 0x95, 0xdb, 0xb1, 0xc7, 0x5c, 0xb9, 0x5d, 0x73, 0x1c, 0x0a, 0x91, 0x46,
	0x62, 0x9e, 0xbb, 0x3d, 0x33, 0x6e, 0x8d, 0xe1, 0x2c, 0xd0, 0x26, 0x1f, 0x98, 0x22, 0xcb, 0x22,
	0x96, 0x3c, 0x42, 0xb7, 0x4f, 0xb7, 0x01, 0xce, 0xb8, 0xd2, 0xc1, 0xb4, 0x4c, 0xd2, 0xc8, 0xdd,
	0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x0c, 0x88, 0x4f, 0x50, 0x09, 0x00, 0x00,
}
