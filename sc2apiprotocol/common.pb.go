// Code generated by protoc-gen-go. DO NOT EDIT.
// source: s2clientprotocol/common.proto

/*
Package sc2apiprotocol is a generated protocol buffer package.

It is generated from these files:
	s2clientprotocol/common.proto

It has these top-level messages:
	AvailableAbility
	ImageData
	PointI
	RectangleI
	Point2D
	Point
	Size2DI
*/
package sc2apiprotocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Race int32

const (
	Race_NoRace  Race = 0
	Race_Terran  Race = 1
	Race_Zerg    Race = 2
	Race_Protoss Race = 3
	Race_Random  Race = 4
)

var Race_name = map[int32]string{
	0: "NoRace",
	1: "Terran",
	2: "Zerg",
	3: "Protoss",
	4: "Random",
}
var Race_value = map[string]int32{
	"NoRace":  0,
	"Terran":  1,
	"Zerg":    2,
	"Protoss": 3,
	"Random":  4,
}

func (x Race) Enum() *Race {
	p := new(Race)
	*p = x
	return p
}
func (x Race) String() string {
	return proto.EnumName(Race_name, int32(x))
}
func (x *Race) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Race_value, data, "Race")
	if err != nil {
		return err
	}
	*x = Race(value)
	return nil
}
func (Race) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

type AvailableAbility struct {
	AbilityId        int32  `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	RequiresPoint    bool   `protobuf:"varint,2,opt,name=requires_point,json=requiresPoint" json:"requires_point,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *AvailableAbility) Reset()                    { *m = AvailableAbility{} }
func (m *AvailableAbility) String() string            { return proto.CompactTextString(m) }
func (*AvailableAbility) ProtoMessage()               {}
func (*AvailableAbility) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

func (m *AvailableAbility) GetAbilityId() int32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *AvailableAbility) GetRequiresPoint() bool {
	if m != nil {
		return m.RequiresPoint
	}
	return false
}

type ImageData struct {
	BitsPerPixel     int32    `protobuf:"varint,1,opt,name=bits_per_pixel,json=bitsPerPixel" json:"bits_per_pixel,omitempty"`
	Size             *Size2DI `protobuf:"bytes,2,opt,name=size" json:"size,omitempty"`
	Data             []byte   `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ImageData) Reset()                    { *m = ImageData{} }
func (m *ImageData) String() string            { return proto.CompactTextString(m) }
func (*ImageData) ProtoMessage()               {}
func (*ImageData) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

func (m *ImageData) GetBitsPerPixel() int32 {
	if m != nil {
		return m.BitsPerPixel
	}
	return 0
}

func (m *ImageData) GetSize() *Size2DI {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *ImageData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Point on the screen/minimap (e.g., 0..64).
// Note: bottom left of the screen is 0, 0.
type PointI struct {
	X                int32  `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                int32  `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PointI) Reset()                    { *m = PointI{} }
func (m *PointI) String() string            { return proto.CompactTextString(m) }
func (*PointI) ProtoMessage()               {}
func (*PointI) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{2} }

func (m *PointI) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *PointI) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// Screen space rectangular area.
type RectangleI struct {
	P0               *PointI `protobuf:"bytes,1,opt,name=p0" json:"p0,omitempty"`
	P1               *PointI `protobuf:"bytes,2,opt,name=p1" json:"p1,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RectangleI) Reset()                    { *m = RectangleI{} }
func (m *RectangleI) String() string            { return proto.CompactTextString(m) }
func (*RectangleI) ProtoMessage()               {}
func (*RectangleI) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{3} }

func (m *RectangleI) GetP0() *PointI {
	if m != nil {
		return m.P0
	}
	return nil
}

func (m *RectangleI) GetP1() *PointI {
	if m != nil {
		return m.P1
	}
	return nil
}

// Point on the game board, 0..255.
// Note: bottom left of the screen is 0, 0.
type Point2D struct {
	X                float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y                float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Point2D) Reset()                    { *m = Point2D{} }
func (m *Point2D) String() string            { return proto.CompactTextString(m) }
func (*Point2D) ProtoMessage()               {}
func (*Point2D) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{4} }

func (m *Point2D) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point2D) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// Point on the game board, 0..255.
// Note: bottom left of the screen is 0, 0.
type Point struct {
	X                float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y                float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z                float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{5} }

func (m *Point) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Point) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

// Screen dimensions.
type Size2DI struct {
	X                int32  `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y                int32  `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Size2DI) Reset()                    { *m = Size2DI{} }
func (m *Size2DI) String() string            { return proto.CompactTextString(m) }
func (*Size2DI) ProtoMessage()               {}
func (*Size2DI) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{6} }

func (m *Size2DI) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Size2DI) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto.RegisterType((*AvailableAbility)(nil), "AvailableAbility")
	proto.RegisterType((*ImageData)(nil), "ImageData")
	proto.RegisterType((*PointI)(nil), "PointI")
	proto.RegisterType((*RectangleI)(nil), "RectangleI")
	proto.RegisterType((*Point2D)(nil), "Point2D")
	proto.RegisterType((*Point)(nil), "Point")
	proto.RegisterType((*Size2DI)(nil), "Size2DI")
	proto.RegisterEnum("Race", Race_name, Race_value)
}

func init() { proto.RegisterFile("s2clientprotocol/common.proto", fileDescriptorCommon) }

var fileDescriptorCommon = []byte{
	// 354 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x90, 0x5f, 0x6b, 0xe2, 0x40,
	0x14, 0xc5, 0x77, 0x62, 0xfc, 0x77, 0x75, 0x25, 0xcc, 0xc3, 0xae, 0x2f, 0x82, 0x04, 0x5d, 0x64,
	0x17, 0x5c, 0xcd, 0x37, 0x08, 0xf5, 0x25, 0x2f, 0x25, 0x8c, 0x7d, 0x28, 0xa5, 0x10, 0xc6, 0xe4,
	0x22, 0x03, 0x49, 0x26, 0x9d, 0x4c, 0x8b, 0xe6, 0xd3, 0x97, 0x19, 0x53, 0x8a, 0x85, 0xfa, 0x76,
	0xcf, 0x99, 0x1f, 0xe7, 0x9e, 0x3b, 0x30, 0xab, 0x83, 0x34, 0x17, 0x58, 0xea, 0x4a, 0x49, 0x2d,
	0x53, 0x99, 0xff, 0x4f, 0x65, 0x51, 0xc8, 0x72, 0x6d, 0x35, 0x9d, 0xec, 0xef, 0x82, 0x30, 0x8e,
	0xe2, 0xf6, 0xd1, 0x7f, 0x04, 0x2f, 0x7c, 0xe3, 0x22, 0xe7, 0x87, 0x1c, 0xc3, 0x83, 0xc8, 0x85,
	0x3e, 0xd3, 0x19, 0x00, 0xbf, 0x8c, 0x89, 0xc8, 0xa6, 0x64, 0x4e, 0x56, 0x5d, 0x36, 0x6c, 0x9d,
	0x28, 0xa3, 0x4b, 0x98, 0x28, 0x7c, 0x79, 0x15, 0x0a, 0xeb, 0xa4, 0x92, 0xa2, 0xd4, 0x53, 0x67,
	0x4e, 0x56, 0x03, 0xf6, 0xf3, 0xc3, 0x8d, 0x8d, 0xe9, 0x2b, 0x18, 0x46, 0x05, 0x3f, 0xe2, 0x8e,
	0x6b, 0x4e, 0x17, 0x30, 0x39, 0x08, 0x5d, 0x27, 0x15, 0xaa, 0xa4, 0x12, 0x27, 0xcc, 0xdb, 0xd8,
	0xb1, 0x71, 0x63, 0x54, 0xb1, 0xf1, 0xe8, 0x3f, 0x70, 0x6b, 0xd1, 0xa0, 0xcd, 0x1b, 0x05, 0xbf,
	0xd7, 0xd7, 0x5d, 0xd7, 0x7b, 0xd1, 0x60, 0xb0, 0x8b, 0x98, 0x85, 0x28, 0x05, 0x37, 0xe3, 0x9a,
	0x4f, 0x3b, 0x73, 0xb2, 0x1a, 0x33, 0x3b, 0xfb, 0x0b, 0xe8, 0xd9, 0xe5, 0x11, 0x1d, 0x03, 0x39,
	0xb5, 0x3b, 0xc8, 0xc9, 0xa8, 0xb3, 0x4d, 0xed, 0x32, 0x72, 0xf6, 0x9f, 0x01, 0x18, 0xa6, 0x9a,
	0x97, 0xc7, 0x1c, 0x23, 0xfa, 0x07, 0x9c, 0x6a, 0x63, 0xd1, 0x51, 0xf0, 0xeb, 0xeb, 0xca, 0x4b,
	0x1a, 0x73, 0xaa, 0x8d, 0xe5, 0xb6, 0x6d, 0xb5, 0xef, 0xb9, 0xad, 0xbf, 0x84, 0xbe, 0x55, 0xc1,
	0xee, 0xb3, 0x84, 0x73, 0x55, 0xc2, 0x31, 0x25, 0xb6, 0xd0, 0xb5, 0xd8, 0x2d, 0xc8, 0xa8, 0xc6,
	0x1e, 0xe8, 0x30, 0xd2, 0x98, 0xe4, 0xf6, 0x0b, 0x6e, 0x9d, 0xf7, 0x37, 0x04, 0x97, 0xf1, 0x14,
	0x29, 0x40, 0xef, 0x5e, 0x9a, 0xc9, 0xfb, 0x61, 0xe6, 0x07, 0x54, 0x8a, 0x97, 0x1e, 0xa1, 0x03,
	0x70, 0x9f, 0x50, 0x1d, 0x3d, 0x87, 0x8e, 0xa0, 0x6f, 0x2f, 0xa8, 0x6b, 0xaf, 0x63, 0x10, 0xc6,
	0xcb, 0x4c, 0x16, 0x9e, 0xfb, 0x1e, 0x00, 0x00, 0xff, 0xff, 0x10, 0x9c, 0x00, 0x93, 0x45, 0x02,
	0x00, 0x00,
}
