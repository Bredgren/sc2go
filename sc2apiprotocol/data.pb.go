// Code generated by protoc-gen-go. DO NOT EDIT.
// source: s2clientprotocol/data.proto

/*
Package sc2apiprotocol is a generated protocol buffer package.

It is generated from these files:
	s2clientprotocol/data.proto

It has these top-level messages:
	AbilityData
	DamageBonus
	Weapon
	UnitTypeData
	UpgradeData
	BuffData
	EffectData
*/
package sc2apiprotocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Attribute int32

const (
	Attribute_Light      Attribute = 1
	Attribute_Armored    Attribute = 2
	Attribute_Biological Attribute = 3
	Attribute_Mechanical Attribute = 4
	Attribute_Robotic    Attribute = 5
	Attribute_Psionic    Attribute = 6
	Attribute_Massive    Attribute = 7
	Attribute_Structure  Attribute = 8
	Attribute_Hover      Attribute = 9
	Attribute_Heroic     Attribute = 10
	Attribute_Summoned   Attribute = 11
)

var Attribute_name = map[int32]string{
	1:  "Light",
	2:  "Armored",
	3:  "Biological",
	4:  "Mechanical",
	5:  "Robotic",
	6:  "Psionic",
	7:  "Massive",
	8:  "Structure",
	9:  "Hover",
	10: "Heroic",
	11: "Summoned",
}
var Attribute_value = map[string]int32{
	"Light":      1,
	"Armored":    2,
	"Biological": 3,
	"Mechanical": 4,
	"Robotic":    5,
	"Psionic":    6,
	"Massive":    7,
	"Structure":  8,
	"Hover":      9,
	"Heroic":     10,
	"Summoned":   11,
}

func (x Attribute) Enum() *Attribute {
	p := new(Attribute)
	*p = x
	return p
}
func (x Attribute) String() string {
	return proto.EnumName(Attribute_name, int32(x))
}
func (x *Attribute) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Attribute_value, data, "Attribute")
	if err != nil {
		return err
	}
	*x = Attribute(value)
	return nil
}
func (Attribute) EnumDescriptor() ([]byte, []int) { return fileDescriptorData, []int{0} }

type AbilityData_Target int32

const (
	AbilityData_None        AbilityData_Target = 1
	AbilityData_Point       AbilityData_Target = 2
	AbilityData_Unit        AbilityData_Target = 3
	AbilityData_PointOrUnit AbilityData_Target = 4
	AbilityData_PointOrNone AbilityData_Target = 5
)

var AbilityData_Target_name = map[int32]string{
	1: "None",
	2: "Point",
	3: "Unit",
	4: "PointOrUnit",
	5: "PointOrNone",
}
var AbilityData_Target_value = map[string]int32{
	"None":        1,
	"Point":       2,
	"Unit":        3,
	"PointOrUnit": 4,
	"PointOrNone": 5,
}

func (x AbilityData_Target) Enum() *AbilityData_Target {
	p := new(AbilityData_Target)
	*p = x
	return p
}
func (x AbilityData_Target) String() string {
	return proto.EnumName(AbilityData_Target_name, int32(x))
}
func (x *AbilityData_Target) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AbilityData_Target_value, data, "AbilityData_Target")
	if err != nil {
		return err
	}
	*x = AbilityData_Target(value)
	return nil
}
func (AbilityData_Target) EnumDescriptor() ([]byte, []int) { return fileDescriptorData, []int{0, 0} }

type Weapon_TargetType int32

const (
	Weapon_Ground Weapon_TargetType = 1
	Weapon_Air    Weapon_TargetType = 2
	Weapon_Any    Weapon_TargetType = 3
)

var Weapon_TargetType_name = map[int32]string{
	1: "Ground",
	2: "Air",
	3: "Any",
}
var Weapon_TargetType_value = map[string]int32{
	"Ground": 1,
	"Air":    2,
	"Any":    3,
}

func (x Weapon_TargetType) Enum() *Weapon_TargetType {
	p := new(Weapon_TargetType)
	*p = x
	return p
}
func (x Weapon_TargetType) String() string {
	return proto.EnumName(Weapon_TargetType_name, int32(x))
}
func (x *Weapon_TargetType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Weapon_TargetType_value, data, "Weapon_TargetType")
	if err != nil {
		return err
	}
	*x = Weapon_TargetType(value)
	return nil
}
func (Weapon_TargetType) EnumDescriptor() ([]byte, []int) { return fileDescriptorData, []int{2, 0} }

// May not relevant: queueable (everything is queueable).
// May not be important: AbilSetId - marine stim, marauder stim.
// Stuff omitted: transient.
// Stuff that may be important: cost, range, Alignment, targetfilters.
type AbilityData struct {
	AbilityId          uint32             `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	LinkName           string             `protobuf:"bytes,2,opt,name=link_name,json=linkName" json:"link_name,omitempty"`
	LinkIndex          uint32             `protobuf:"varint,3,opt,name=link_index,json=linkIndex" json:"link_index,omitempty"`
	ButtonName         string             `protobuf:"bytes,4,opt,name=button_name,json=buttonName" json:"button_name,omitempty"`
	FriendlyName       string             `protobuf:"bytes,5,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Hotkey             string             `protobuf:"bytes,6,opt,name=hotkey" json:"hotkey,omitempty"`
	RemapsToAbilityId  uint32             `protobuf:"varint,7,opt,name=remaps_to_ability_id,json=remapsToAbilityId" json:"remaps_to_ability_id,omitempty"`
	Available          bool               `protobuf:"varint,8,opt,name=available" json:"available,omitempty"`
	Target             AbilityData_Target `protobuf:"varint,9,opt,name=target,enum=AbilityData_Target" json:"target,omitempty"`
	AllowMinimap       bool               `protobuf:"varint,10,opt,name=allow_minimap,json=allowMinimap" json:"allow_minimap,omitempty"`
	AllowAutocast      bool               `protobuf:"varint,11,opt,name=allow_autocast,json=allowAutocast" json:"allow_autocast,omitempty"`
	IsBuilding         bool               `protobuf:"varint,12,opt,name=is_building,json=isBuilding" json:"is_building,omitempty"`
	FootprintRadius    float32            `protobuf:"fixed32,13,opt,name=footprint_radius,json=footprintRadius" json:"footprint_radius,omitempty"`
	IsInstantPlacement bool               `protobuf:"varint,14,opt,name=is_instant_placement,json=isInstantPlacement" json:"is_instant_placement,omitempty"`
	CastRange          float32            `protobuf:"fixed32,15,opt,name=cast_range,json=castRange" json:"cast_range,omitempty"`
	XXX_unrecognized   []byte             `json:"-"`
}

func (m *AbilityData) Reset()                    { *m = AbilityData{} }
func (m *AbilityData) String() string            { return proto.CompactTextString(m) }
func (*AbilityData) ProtoMessage()               {}
func (*AbilityData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{0} }

func (m *AbilityData) GetAbilityId() uint32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *AbilityData) GetLinkName() string {
	if m != nil {
		return m.LinkName
	}
	return ""
}

func (m *AbilityData) GetLinkIndex() uint32 {
	if m != nil {
		return m.LinkIndex
	}
	return 0
}

func (m *AbilityData) GetButtonName() string {
	if m != nil {
		return m.ButtonName
	}
	return ""
}

func (m *AbilityData) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *AbilityData) GetHotkey() string {
	if m != nil {
		return m.Hotkey
	}
	return ""
}

func (m *AbilityData) GetRemapsToAbilityId() uint32 {
	if m != nil {
		return m.RemapsToAbilityId
	}
	return 0
}

func (m *AbilityData) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *AbilityData) GetTarget() AbilityData_Target {
	if m != nil {
		return m.Target
	}
	return AbilityData_None
}

func (m *AbilityData) GetAllowMinimap() bool {
	if m != nil {
		return m.AllowMinimap
	}
	return false
}

func (m *AbilityData) GetAllowAutocast() bool {
	if m != nil {
		return m.AllowAutocast
	}
	return false
}

func (m *AbilityData) GetIsBuilding() bool {
	if m != nil {
		return m.IsBuilding
	}
	return false
}

func (m *AbilityData) GetFootprintRadius() float32 {
	if m != nil {
		return m.FootprintRadius
	}
	return 0
}

func (m *AbilityData) GetIsInstantPlacement() bool {
	if m != nil {
		return m.IsInstantPlacement
	}
	return false
}

func (m *AbilityData) GetCastRange() float32 {
	if m != nil {
		return m.CastRange
	}
	return 0
}

type DamageBonus struct {
	Attribute        Attribute `protobuf:"varint,1,opt,name=attribute,enum=Attribute" json:"attribute,omitempty"`
	Bonus            float32   `protobuf:"fixed32,2,opt,name=bonus" json:"bonus,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *DamageBonus) Reset()                    { *m = DamageBonus{} }
func (m *DamageBonus) String() string            { return proto.CompactTextString(m) }
func (*DamageBonus) ProtoMessage()               {}
func (*DamageBonus) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{1} }

func (m *DamageBonus) GetAttribute() Attribute {
	if m != nil {
		return m.Attribute
	}
	return Attribute_Light
}

func (m *DamageBonus) GetBonus() float32 {
	if m != nil {
		return m.Bonus
	}
	return 0
}

type Weapon struct {
	Type             Weapon_TargetType `protobuf:"varint,1,opt,name=type,enum=Weapon_TargetType" json:"type,omitempty"`
	Damage           float32           `protobuf:"fixed32,2,opt,name=damage" json:"damage,omitempty"`
	DamageBonus      []*DamageBonus    `protobuf:"bytes,3,rep,name=damage_bonus,json=damageBonus" json:"damage_bonus,omitempty"`
	Attacks          uint32            `protobuf:"varint,4,opt,name=attacks" json:"attacks,omitempty"`
	Range            float32           `protobuf:"fixed32,5,opt,name=range" json:"range,omitempty"`
	Speed            float32           `protobuf:"fixed32,6,opt,name=speed" json:"speed,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Weapon) Reset()                    { *m = Weapon{} }
func (m *Weapon) String() string            { return proto.CompactTextString(m) }
func (*Weapon) ProtoMessage()               {}
func (*Weapon) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{2} }

func (m *Weapon) GetType() Weapon_TargetType {
	if m != nil {
		return m.Type
	}
	return Weapon_Ground
}

func (m *Weapon) GetDamage() float32 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *Weapon) GetDamageBonus() []*DamageBonus {
	if m != nil {
		return m.DamageBonus
	}
	return nil
}

func (m *Weapon) GetAttacks() uint32 {
	if m != nil {
		return m.Attacks
	}
	return 0
}

func (m *Weapon) GetRange() float32 {
	if m != nil {
		return m.Range
	}
	return 0
}

func (m *Weapon) GetSpeed() float32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

type UnitTypeData struct {
	UnitId          uint32   `protobuf:"varint,1,opt,name=unit_id,json=unitId" json:"unit_id,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Available       bool     `protobuf:"varint,3,opt,name=available" json:"available,omitempty"`
	CargoSize       uint32   `protobuf:"varint,4,opt,name=cargo_size,json=cargoSize" json:"cargo_size,omitempty"`
	MineralCost     uint32   `protobuf:"varint,12,opt,name=mineral_cost,json=mineralCost" json:"mineral_cost,omitempty"`
	VespeneCost     uint32   `protobuf:"varint,13,opt,name=vespene_cost,json=vespeneCost" json:"vespene_cost,omitempty"`
	FoodRequired    float32  `protobuf:"fixed32,14,opt,name=food_required,json=foodRequired" json:"food_required,omitempty"`
	FoodProvided    float32  `protobuf:"fixed32,18,opt,name=food_provided,json=foodProvided" json:"food_provided,omitempty"`
	AbilityId       uint32   `protobuf:"varint,15,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	Race            Race     `protobuf:"varint,16,opt,name=race,enum=Race" json:"race,omitempty"`
	BuildTime       float32  `protobuf:"fixed32,17,opt,name=build_time,json=buildTime" json:"build_time,omitempty"`
	HasVespene      bool     `protobuf:"varint,19,opt,name=has_vespene,json=hasVespene" json:"has_vespene,omitempty"`
	HasMinerals     bool     `protobuf:"varint,20,opt,name=has_minerals,json=hasMinerals" json:"has_minerals,omitempty"`
	SightRange      float32  `protobuf:"fixed32,25,opt,name=sight_range,json=sightRange" json:"sight_range,omitempty"`
	TechAlias       []uint32 `protobuf:"varint,21,rep,name=tech_alias,json=techAlias" json:"tech_alias,omitempty"`
	UnitAlias       uint32   `protobuf:"varint,22,opt,name=unit_alias,json=unitAlias" json:"unit_alias,omitempty"`
	TechRequirement uint32   `protobuf:"varint,23,opt,name=tech_requirement,json=techRequirement" json:"tech_requirement,omitempty"`
	RequireAttached bool     `protobuf:"varint,24,opt,name=require_attached,json=requireAttached" json:"require_attached,omitempty"`
	// Values include changes from upgrades
	Attributes       []Attribute `protobuf:"varint,8,rep,name=attributes,enum=Attribute" json:"attributes,omitempty"`
	MovementSpeed    float32     `protobuf:"fixed32,9,opt,name=movement_speed,json=movementSpeed" json:"movement_speed,omitempty"`
	Armor            float32     `protobuf:"fixed32,10,opt,name=armor" json:"armor,omitempty"`
	Weapons          []*Weapon   `protobuf:"bytes,11,rep,name=weapons" json:"weapons,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *UnitTypeData) Reset()                    { *m = UnitTypeData{} }
func (m *UnitTypeData) String() string            { return proto.CompactTextString(m) }
func (*UnitTypeData) ProtoMessage()               {}
func (*UnitTypeData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{3} }

func (m *UnitTypeData) GetUnitId() uint32 {
	if m != nil {
		return m.UnitId
	}
	return 0
}

func (m *UnitTypeData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UnitTypeData) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *UnitTypeData) GetCargoSize() uint32 {
	if m != nil {
		return m.CargoSize
	}
	return 0
}

func (m *UnitTypeData) GetMineralCost() uint32 {
	if m != nil {
		return m.MineralCost
	}
	return 0
}

func (m *UnitTypeData) GetVespeneCost() uint32 {
	if m != nil {
		return m.VespeneCost
	}
	return 0
}

func (m *UnitTypeData) GetFoodRequired() float32 {
	if m != nil {
		return m.FoodRequired
	}
	return 0
}

func (m *UnitTypeData) GetFoodProvided() float32 {
	if m != nil {
		return m.FoodProvided
	}
	return 0
}

func (m *UnitTypeData) GetAbilityId() uint32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func (m *UnitTypeData) GetRace() Race {
	if m != nil {
		return m.Race
	}
	return Race_NoRace
}

func (m *UnitTypeData) GetBuildTime() float32 {
	if m != nil {
		return m.BuildTime
	}
	return 0
}

func (m *UnitTypeData) GetHasVespene() bool {
	if m != nil {
		return m.HasVespene
	}
	return false
}

func (m *UnitTypeData) GetHasMinerals() bool {
	if m != nil {
		return m.HasMinerals
	}
	return false
}

func (m *UnitTypeData) GetSightRange() float32 {
	if m != nil {
		return m.SightRange
	}
	return 0
}

func (m *UnitTypeData) GetTechAlias() []uint32 {
	if m != nil {
		return m.TechAlias
	}
	return nil
}

func (m *UnitTypeData) GetUnitAlias() uint32 {
	if m != nil {
		return m.UnitAlias
	}
	return 0
}

func (m *UnitTypeData) GetTechRequirement() uint32 {
	if m != nil {
		return m.TechRequirement
	}
	return 0
}

func (m *UnitTypeData) GetRequireAttached() bool {
	if m != nil {
		return m.RequireAttached
	}
	return false
}

func (m *UnitTypeData) GetAttributes() []Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UnitTypeData) GetMovementSpeed() float32 {
	if m != nil {
		return m.MovementSpeed
	}
	return 0
}

func (m *UnitTypeData) GetArmor() float32 {
	if m != nil {
		return m.Armor
	}
	return 0
}

func (m *UnitTypeData) GetWeapons() []*Weapon {
	if m != nil {
		return m.Weapons
	}
	return nil
}

type UpgradeData struct {
	UpgradeId        uint32  `protobuf:"varint,1,opt,name=upgrade_id,json=upgradeId" json:"upgrade_id,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MineralCost      uint32  `protobuf:"varint,3,opt,name=mineral_cost,json=mineralCost" json:"mineral_cost,omitempty"`
	VespeneCost      uint32  `protobuf:"varint,4,opt,name=vespene_cost,json=vespeneCost" json:"vespene_cost,omitempty"`
	ResearchTime     float32 `protobuf:"fixed32,5,opt,name=research_time,json=researchTime" json:"research_time,omitempty"`
	AbilityId        uint32  `protobuf:"varint,6,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UpgradeData) Reset()                    { *m = UpgradeData{} }
func (m *UpgradeData) String() string            { return proto.CompactTextString(m) }
func (*UpgradeData) ProtoMessage()               {}
func (*UpgradeData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{4} }

func (m *UpgradeData) GetUpgradeId() uint32 {
	if m != nil {
		return m.UpgradeId
	}
	return 0
}

func (m *UpgradeData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpgradeData) GetMineralCost() uint32 {
	if m != nil {
		return m.MineralCost
	}
	return 0
}

func (m *UpgradeData) GetVespeneCost() uint32 {
	if m != nil {
		return m.VespeneCost
	}
	return 0
}

func (m *UpgradeData) GetResearchTime() float32 {
	if m != nil {
		return m.ResearchTime
	}
	return 0
}

func (m *UpgradeData) GetAbilityId() uint32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

type BuffData struct {
	BuffId           uint32 `protobuf:"varint,1,opt,name=buff_id,json=buffId" json:"buff_id,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BuffData) Reset()                    { *m = BuffData{} }
func (m *BuffData) String() string            { return proto.CompactTextString(m) }
func (*BuffData) ProtoMessage()               {}
func (*BuffData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{5} }

func (m *BuffData) GetBuffId() uint32 {
	if m != nil {
		return m.BuffId
	}
	return 0
}

func (m *BuffData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type EffectData struct {
	EffectId         uint32  `protobuf:"varint,1,opt,name=effect_id,json=effectId" json:"effect_id,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	FriendlyName     string  `protobuf:"bytes,3,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	Radius           float32 `protobuf:"fixed32,4,opt,name=radius" json:"radius,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EffectData) Reset()                    { *m = EffectData{} }
func (m *EffectData) String() string            { return proto.CompactTextString(m) }
func (*EffectData) ProtoMessage()               {}
func (*EffectData) Descriptor() ([]byte, []int) { return fileDescriptorData, []int{6} }

func (m *EffectData) GetEffectId() uint32 {
	if m != nil {
		return m.EffectId
	}
	return 0
}

func (m *EffectData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EffectData) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *EffectData) GetRadius() float32 {
	if m != nil {
		return m.Radius
	}
	return 0
}

func init() {
	proto.RegisterType((*AbilityData)(nil), "AbilityData")
	proto.RegisterType((*DamageBonus)(nil), "DamageBonus")
	proto.RegisterType((*Weapon)(nil), "Weapon")
	proto.RegisterType((*UnitTypeData)(nil), "UnitTypeData")
	proto.RegisterType((*UpgradeData)(nil), "UpgradeData")
	proto.RegisterType((*BuffData)(nil), "BuffData")
	proto.RegisterType((*EffectData)(nil), "EffectData")
	proto.RegisterEnum("Attribute", Attribute_name, Attribute_value)
	proto.RegisterEnum("AbilityData_Target", AbilityData_Target_name, AbilityData_Target_value)
	proto.RegisterEnum("Weapon_TargetType", Weapon_TargetType_name, Weapon_TargetType_value)
}

func init() { proto.RegisterFile("s2clientprotocol/data.proto", fileDescriptorData) }

var fileDescriptorData = []byte{
	// 1146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x96, 0xcf, 0x6f, 0xdb, 0x36,
	0x14, 0xc7, 0xe1, 0xdf, 0xd6, 0xb3, 0x9d, 0xa8, 0x5c, 0xd6, 0xaa, 0xcb, 0x8a, 0xb9, 0x1e, 0x06,
	0xb8, 0x3d, 0xa4, 0x45, 0x80, 0xa1, 0xd8, 0x0e, 0x03, 0x9c, 0x76, 0x58, 0x03, 0x2c, 0x5d, 0xa0,
	0xa4, 0xdb, 0x65, 0x80, 0x40, 0x4b, 0xb4, 0x4d, 0x54, 0x22, 0x35, 0x92, 0x4a, 0x97, 0xde, 0x77,
	0xd8, 0x79, 0xf7, 0xfd, 0x41, 0xfb, 0xab, 0x86, 0xf7, 0x28, 0xc7, 0xae, 0x9b, 0x6e, 0x37, 0xbf,
	0x0f, 0xbf, 0x8f, 0xe2, 0x23, 0xdf, 0x97, 0x34, 0x1c, 0xda, 0xe3, 0x34, 0x97, 0x42, 0xb9, 0xd2,
	0x68, 0xa7, 0x53, 0x9d, 0x3f, 0xc9, 0xb8, 0xe3, 0x47, 0x14, 0xb1, 0xbd, 0x8b, 0xe7, 0xc7, 0xb3,
	0xf3, 0xd3, 0xf3, 0x7a, 0xe8, 0xb3, 0x07, 0x1f, 0x88, 0x53, 0x5d, 0x14, 0x5a, 0x79, 0xf9, 0xe4,
	0x8f, 0x0e, 0x0c, 0x66, 0x73, 0x99, 0x4b, 0x77, 0xfd, 0x82, 0x3b, 0xce, 0x1e, 0x00, 0x70, 0x1f,
	0x26, 0x32, 0x8b, 0x1a, 0xe3, 0xc6, 0x74, 0x14, 0x07, 0x35, 0x39, 0xcd, 0xd8, 0x21, 0x04, 0xb9,
	0x54, 0x6f, 0x12, 0xc5, 0x0b, 0x11, 0x35, 0xc7, 0x8d, 0x69, 0x10, 0xf7, 0x11, 0xbc, 0xe2, 0x85,
	0xc0, 0x5c, 0x1a, 0x94, 0x2a, 0x13, 0xbf, 0x47, 0x2d, 0x9f, 0x8b, 0xe4, 0x14, 0x01, 0xfb, 0x02,
	0x06, 0xf3, 0xca, 0x39, 0xad, 0x7c, 0x76, 0x9b, 0xb2, 0xc1, 0x23, 0xca, 0xff, 0x12, 0x46, 0x0b,
	0x23, 0x85, 0xca, 0xf2, 0x6b, 0x2f, 0xe9, 0x90, 0x64, 0xb8, 0x86, 0x24, 0xba, 0x0b, 0xdd, 0x95,
	0x76, 0x6f, 0xc4, 0x75, 0xd4, 0xa5, 0xd1, 0x3a, 0x62, 0x4f, 0xe0, 0xc0, 0x88, 0x82, 0x97, 0x36,
	0x71, 0x3a, 0xd9, 0x2a, 0xa1, 0x47, 0xcb, 0xb8, 0xe3, 0xc7, 0x2e, 0xf5, 0xec, 0xa6, 0x94, 0xcf,
	0x21, 0xe0, 0x57, 0x5c, 0xe6, 0x7c, 0x9e, 0x8b, 0xa8, 0x3f, 0x6e, 0x4c, 0xfb, 0xf1, 0x06, 0xb0,
	0x6f, 0xa1, 0xeb, 0xb8, 0x59, 0x0a, 0x17, 0x05, 0xe3, 0xc6, 0x74, 0xef, 0x78, 0x72, 0xf4, 0xfe,
	0xbe, 0x1e, 0x6d, 0x6d, 0xda, 0xd1, 0x25, 0x29, 0xe3, 0x3a, 0x03, 0xeb, 0xe0, 0x79, 0xae, 0xdf,
	0x26, 0x85, 0x54, 0xb2, 0xe0, 0x65, 0x04, 0x34, 0xfb, 0x90, 0xe0, 0x99, 0x67, 0xec, 0x2b, 0xd8,
	0xf3, 0x22, 0x5e, 0x39, 0x9d, 0x72, 0xeb, 0xa2, 0x01, 0xa9, 0x7c, 0xea, 0xac, 0x86, 0xb8, 0x69,
	0xd2, 0x26, 0xf3, 0x4a, 0xe6, 0x99, 0x54, 0xcb, 0x68, 0x48, 0x1a, 0x90, 0xf6, 0xa4, 0x26, 0xec,
	0x11, 0x84, 0x0b, 0xad, 0x5d, 0x69, 0xa4, 0x72, 0x89, 0xe1, 0x99, 0xac, 0x6c, 0x34, 0x1a, 0x37,
	0xa6, 0xcd, 0x78, 0xff, 0x86, 0xc7, 0x84, 0xd9, 0x53, 0x38, 0x90, 0x36, 0x91, 0xca, 0x3a, 0xae,
	0x5c, 0x52, 0xe6, 0x3c, 0x15, 0x85, 0x50, 0x2e, 0xda, 0xa3, 0x49, 0x99, 0xb4, 0xa7, 0x7e, 0xe8,
	0x7c, 0x3d, 0x82, 0x27, 0x8a, 0xab, 0x48, 0x0c, 0x57, 0x4b, 0x11, 0xed, 0xd3, 0xb4, 0x01, 0x92,
	0x18, 0xc1, 0xe4, 0x14, 0xba, 0xbe, 0x74, 0xd6, 0x87, 0xf6, 0x2b, 0xad, 0x44, 0xd8, 0x60, 0x01,
	0x74, 0xce, 0xb5, 0x54, 0x2e, 0x6c, 0x22, 0x7c, 0xad, 0xa4, 0x0b, 0x5b, 0x6c, 0x1f, 0x06, 0x04,
	0x7f, 0x32, 0x04, 0xda, 0x5b, 0x80, 0xd2, 0x3a, 0x93, 0x5f, 0x61, 0xf0, 0x82, 0x17, 0x7c, 0x29,
	0x4e, 0xb4, 0xaa, 0x2c, 0x7b, 0x06, 0x01, 0x77, 0xce, 0xc8, 0x79, 0xe5, 0x04, 0x75, 0xe1, 0xde,
	0xf1, 0xfd, 0x0f, 0x4e, 0x60, 0x2d, 0x88, 0x37, 0x5a, 0x76, 0x00, 0x9d, 0x39, 0xce, 0x40, 0xcd,
	0xd9, 0x8c, 0x7d, 0x30, 0xf9, 0xb3, 0x09, 0xdd, 0x5f, 0x04, 0x2f, 0xb5, 0x62, 0x5f, 0x43, 0xdb,
	0x5d, 0x97, 0xeb, 0x49, 0x1f, 0xee, 0x4e, 0xea, 0x55, 0xf5, 0x89, 0x5e, 0x5e, 0x97, 0x22, 0x26,
	0x39, 0xb6, 0x5d, 0x46, 0xeb, 0xab, 0x27, 0xae, 0x23, 0xf6, 0x1d, 0x0c, 0xfd, 0xaf, 0xc4, 0x7f,
	0xb6, 0x35, 0x6e, 0x4d, 0x07, 0xc7, 0x87, 0xbb, 0xd3, 0x6e, 0xd5, 0x16, 0x0f, 0xb2, 0xad, 0x42,
	0x23, 0xe8, 0x71, 0xe7, 0x78, 0xfa, 0xc6, 0x92, 0x21, 0x46, 0xf1, 0x3a, 0xc4, 0x4a, 0xfc, 0xb6,
	0x77, 0x7c, 0x25, 0x14, 0x20, 0xb5, 0xa5, 0x10, 0x19, 0x75, 0x7f, 0x33, 0xf6, 0xc1, 0xe4, 0x31,
	0xc0, 0x66, 0xc5, 0x0c, 0xa0, 0xfb, 0x83, 0xd1, 0x95, 0xca, 0xc2, 0x06, 0xeb, 0x41, 0x6b, 0x26,
	0x4d, 0xd8, 0xa4, 0x1f, 0xea, 0x3a, 0x6c, 0x4d, 0xfe, 0xea, 0xc2, 0x10, 0x4f, 0x01, 0xa5, 0x64,
	0xf9, 0x7b, 0xd0, 0xab, 0x94, 0x74, 0x1b, 0xbf, 0x77, 0x31, 0x3c, 0xcd, 0x18, 0x83, 0xf6, 0x96,
	0xcf, 0xe9, 0xf7, 0xfb, 0xae, 0x69, 0xed, 0xba, 0x86, 0xfa, 0xc5, 0x2c, 0x75, 0x62, 0xe5, 0x3b,
	0x51, 0x17, 0x14, 0x10, 0xb9, 0x90, 0xef, 0x04, 0x7b, 0x08, 0xc3, 0x42, 0x2a, 0x61, 0x78, 0x9e,
	0xa4, 0xda, 0x3a, 0xea, 0xe6, 0x51, 0x3c, 0xa8, 0xd9, 0x73, 0x6d, 0x1d, 0x4a, 0xae, 0x84, 0x2d,
	0x85, 0x12, 0x5e, 0x32, 0xf2, 0x92, 0x9a, 0x91, 0x04, 0xaf, 0x09, 0xad, 0xb3, 0xc4, 0x88, 0xdf,
	0x2a, 0x69, 0x44, 0x46, 0xfd, 0xdb, 0x8c, 0x87, 0x08, 0xe3, 0x9a, 0xdd, 0x88, 0x4a, 0xa3, 0xaf,
	0x64, 0x26, 0xb2, 0x88, 0x6d, 0x44, 0xe7, 0x35, 0xdb, 0xb9, 0xec, 0xf6, 0x77, 0x2f, 0xbb, 0x29,
	0xb4, 0x0d, 0x4f, 0x45, 0x14, 0x52, 0xab, 0x1c, 0xec, 0x9e, 0x69, 0xcc, 0x53, 0x11, 0x93, 0x02,
	0x27, 0x22, 0x8b, 0x26, 0x4e, 0x16, 0x22, 0xba, 0xe3, 0x7d, 0x42, 0xe4, 0x52, 0x16, 0x02, 0x4d,
	0xbc, 0xe2, 0x36, 0xa9, 0x8b, 0x88, 0x3e, 0xf1, 0x26, 0x5e, 0x71, 0xfb, 0xb3, 0x27, 0x58, 0x35,
	0x0a, 0xea, 0x8d, 0xb0, 0xd1, 0x01, 0x29, 0x30, 0xe9, 0xac, 0x46, 0x38, 0x87, 0x95, 0xcb, 0xd5,
	0xda, 0x8b, 0xf7, 0xe9, 0x1b, 0x40, 0x88, 0xcc, 0x88, 0x6b, 0x70, 0x22, 0x5d, 0x25, 0x3c, 0x97,
	0xdc, 0x46, 0x9f, 0x8e, 0x5b, 0x58, 0x0c, 0x92, 0x19, 0x02, 0x1c, 0xa6, 0x53, 0xf6, 0xc3, 0x77,
	0x7d, 0xad, 0x48, 0xfc, 0xf0, 0x23, 0x08, 0x29, 0xbb, 0xde, 0x54, 0xba, 0x17, 0xee, 0x91, 0x68,
	0x1f, 0x79, 0xbc, 0xc1, 0x28, 0xad, 0x55, 0x09, 0xf5, 0xea, 0x4a, 0x64, 0x51, 0x44, 0x0b, 0xde,
	0xaf, 0xf9, 0xac, 0xc6, 0xec, 0x1b, 0x80, 0x1b, 0x6b, 0xda, 0xa8, 0x3f, 0x6e, 0xfd, 0xb7, 0x8f,
	0xb7, 0xc4, 0x78, 0x3f, 0x16, 0xfa, 0x8a, 0xbe, 0x98, 0xf8, 0x8e, 0x0f, 0xa8, 0xe4, 0xd1, 0x9a,
	0x5e, 0x20, 0x44, 0x3f, 0x70, 0x53, 0x68, 0x43, 0x77, 0x6c, 0x33, 0xf6, 0x01, 0x7b, 0x0a, 0xbd,
	0xb7, 0x64, 0x64, 0x1b, 0x0d, 0xc8, 0x90, 0x77, 0x6f, 0xf7, 0x79, 0xbc, 0x96, 0x4d, 0xfe, 0x69,
	0xc0, 0xe0, 0x75, 0xb9, 0x34, 0x3c, 0x13, 0xeb, 0x77, 0xb0, 0xf2, 0xe1, 0xd6, 0x3b, 0x58, 0x93,
	0x8f, 0x58, 0x63, 0xb7, 0xbb, 0x5b, 0xff, 0xdf, 0xdd, 0xed, 0x5b, 0xbb, 0xdb, 0x08, 0x2b, 0xb8,
	0x49, 0x57, 0xbe, 0x9b, 0xbc, 0xfd, 0x87, 0x6b, 0x48, 0x0d, 0xf5, 0x7e, 0xe3, 0x76, 0x77, 0x1a,
	0x77, 0xf2, 0x0c, 0xfa, 0x27, 0xd5, 0x62, 0xb1, 0x76, 0xf7, 0xbc, 0x5a, 0x2c, 0xb6, 0xdc, 0x8d,
	0xe1, 0xed, 0x25, 0x4c, 0xde, 0x01, 0x7c, 0xbf, 0x58, 0x88, 0xd4, 0x51, 0xea, 0x21, 0x04, 0x82,
	0xa2, 0x4d, 0x72, 0xdf, 0x83, 0x8f, 0xec, 0xc0, 0x07, 0x0f, 0x78, 0xeb, 0xf6, 0x07, 0xbc, 0x7e,
	0xa6, 0xda, 0xfe, 0x26, 0xf5, 0xd1, 0xe3, 0xbf, 0x1b, 0x10, 0xdc, 0xb4, 0x02, 0x3e, 0x23, 0x3f,
	0x62, 0x6f, 0x87, 0x0d, 0x36, 0x80, 0xde, 0x0c, 0x4f, 0x55, 0x64, 0x61, 0x93, 0xed, 0x01, 0x9c,
	0x48, 0x9d, 0xeb, 0xa5, 0x4c, 0x79, 0x1e, 0xb6, 0x30, 0x3e, 0x13, 0xe9, 0x8a, 0x2b, 0x8a, 0xdb,
	0x28, 0x8e, 0xf5, 0x5c, 0x3b, 0x99, 0x86, 0x1d, 0x0c, 0xce, 0xad, 0xd4, 0x4a, 0xa6, 0x61, 0x17,
	0x83, 0x33, 0x6e, 0xad, 0xbc, 0x12, 0x61, 0x8f, 0x8d, 0x20, 0xb8, 0x70, 0xa6, 0x4a, 0x5d, 0x65,
	0x44, 0xd8, 0xc7, 0xaf, 0xbd, 0xd4, 0x57, 0xc2, 0x84, 0x01, 0x5e, 0x9e, 0x2f, 0x85, 0xd1, 0x32,
	0x0d, 0x81, 0x0d, 0xa1, 0x7f, 0x51, 0xe1, 0x9f, 0x25, 0x91, 0x85, 0x83, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x9e, 0xde, 0x31, 0x63, 0x77, 0x09, 0x00, 0x00,
}
