// Code generated by protoc-gen-go. DO NOT EDIT.
// source: s2clientprotocol/raw.proto

/*
Package sc2apiprotocol is a generated protocol buffer package.

It is generated from these files:
	s2clientprotocol/raw.proto

It has these top-level messages:
	StartRaw
	ObservationRaw
	PowerSource
	PlayerRaw
	UnitOrder
	PassengerUnit
	Unit
	MapState
	Event
	Effect
	ActionRaw
	ActionRawUnitCommand
	ActionRawCameraMove
	ActionRawToggleAutocast
*/
package sc2apiprotocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DisplayType int32

const (
	DisplayType_Visible  DisplayType = 1
	DisplayType_Snapshot DisplayType = 2
	DisplayType_Hidden   DisplayType = 3
)

var DisplayType_name = map[int32]string{
	1: "Visible",
	2: "Snapshot",
	3: "Hidden",
}
var DisplayType_value = map[string]int32{
	"Visible":  1,
	"Snapshot": 2,
	"Hidden":   3,
}

func (x DisplayType) Enum() *DisplayType {
	p := new(DisplayType)
	*p = x
	return p
}
func (x DisplayType) String() string {
	return proto.EnumName(DisplayType_name, int32(x))
}
func (x *DisplayType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DisplayType_value, data, "DisplayType")
	if err != nil {
		return err
	}
	*x = DisplayType(value)
	return nil
}
func (DisplayType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaw, []int{0} }

type Alliance int32

const (
	Alliance_Self    Alliance = 1
	Alliance_Ally    Alliance = 2
	Alliance_Neutral Alliance = 3
	Alliance_Enemy   Alliance = 4
)

var Alliance_name = map[int32]string{
	1: "Self",
	2: "Ally",
	3: "Neutral",
	4: "Enemy",
}
var Alliance_value = map[string]int32{
	"Self":    1,
	"Ally":    2,
	"Neutral": 3,
	"Enemy":   4,
}

func (x Alliance) Enum() *Alliance {
	p := new(Alliance)
	*p = x
	return p
}
func (x Alliance) String() string {
	return proto.EnumName(Alliance_name, int32(x))
}
func (x *Alliance) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Alliance_value, data, "Alliance")
	if err != nil {
		return err
	}
	*x = Alliance(value)
	return nil
}
func (Alliance) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaw, []int{1} }

type CloakState int32

const (
	CloakState_Cloaked         CloakState = 1
	CloakState_CloakedDetected CloakState = 2
	CloakState_NotCloaked      CloakState = 3
)

var CloakState_name = map[int32]string{
	1: "Cloaked",
	2: "CloakedDetected",
	3: "NotCloaked",
}
var CloakState_value = map[string]int32{
	"Cloaked":         1,
	"CloakedDetected": 2,
	"NotCloaked":      3,
}

func (x CloakState) Enum() *CloakState {
	p := new(CloakState)
	*p = x
	return p
}
func (x CloakState) String() string {
	return proto.EnumName(CloakState_name, int32(x))
}
func (x *CloakState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CloakState_value, data, "CloakState")
	if err != nil {
		return err
	}
	*x = CloakState(value)
	return nil
}
func (CloakState) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaw, []int{2} }

type StartRaw struct {
	MapSize          *Size2DI    `protobuf:"bytes,1,opt,name=map_size,json=mapSize" json:"map_size,omitempty"`
	PathingGrid      *ImageData  `protobuf:"bytes,2,opt,name=pathing_grid,json=pathingGrid" json:"pathing_grid,omitempty"`
	TerrainHeight    *ImageData  `protobuf:"bytes,3,opt,name=terrain_height,json=terrainHeight" json:"terrain_height,omitempty"`
	PlacementGrid    *ImageData  `protobuf:"bytes,4,opt,name=placement_grid,json=placementGrid" json:"placement_grid,omitempty"`
	PlayableArea     *RectangleI `protobuf:"bytes,5,opt,name=playable_area,json=playableArea" json:"playable_area,omitempty"`
	StartLocations   []*Point2D  `protobuf:"bytes,6,rep,name=start_locations,json=startLocations" json:"start_locations,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *StartRaw) Reset()                    { *m = StartRaw{} }
func (m *StartRaw) String() string            { return proto.CompactTextString(m) }
func (*StartRaw) ProtoMessage()               {}
func (*StartRaw) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{0} }

func (m *StartRaw) GetMapSize() *Size2DI {
	if m != nil {
		return m.MapSize
	}
	return nil
}

func (m *StartRaw) GetPathingGrid() *ImageData {
	if m != nil {
		return m.PathingGrid
	}
	return nil
}

func (m *StartRaw) GetTerrainHeight() *ImageData {
	if m != nil {
		return m.TerrainHeight
	}
	return nil
}

func (m *StartRaw) GetPlacementGrid() *ImageData {
	if m != nil {
		return m.PlacementGrid
	}
	return nil
}

func (m *StartRaw) GetPlayableArea() *RectangleI {
	if m != nil {
		return m.PlayableArea
	}
	return nil
}

func (m *StartRaw) GetStartLocations() []*Point2D {
	if m != nil {
		return m.StartLocations
	}
	return nil
}

type ObservationRaw struct {
	Player           *PlayerRaw `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	Units            []*Unit    `protobuf:"bytes,2,rep,name=units" json:"units,omitempty"`
	MapState         *MapState  `protobuf:"bytes,3,opt,name=map_state,json=mapState" json:"map_state,omitempty"`
	Event            *Event     `protobuf:"bytes,4,opt,name=event" json:"event,omitempty"`
	Effects          []*Effect  `protobuf:"bytes,5,rep,name=effects" json:"effects,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ObservationRaw) Reset()                    { *m = ObservationRaw{} }
func (m *ObservationRaw) String() string            { return proto.CompactTextString(m) }
func (*ObservationRaw) ProtoMessage()               {}
func (*ObservationRaw) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{1} }

func (m *ObservationRaw) GetPlayer() *PlayerRaw {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *ObservationRaw) GetUnits() []*Unit {
	if m != nil {
		return m.Units
	}
	return nil
}

func (m *ObservationRaw) GetMapState() *MapState {
	if m != nil {
		return m.MapState
	}
	return nil
}

func (m *ObservationRaw) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ObservationRaw) GetEffects() []*Effect {
	if m != nil {
		return m.Effects
	}
	return nil
}

type PowerSource struct {
	Pos              *Point   `protobuf:"bytes,1,opt,name=pos" json:"pos,omitempty"`
	Radius           *float32 `protobuf:"fixed32,2,opt,name=radius" json:"radius,omitempty"`
	Tag              *uint64  `protobuf:"varint,3,opt,name=tag" json:"tag,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PowerSource) Reset()                    { *m = PowerSource{} }
func (m *PowerSource) String() string            { return proto.CompactTextString(m) }
func (*PowerSource) ProtoMessage()               {}
func (*PowerSource) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{2} }

func (m *PowerSource) GetPos() *Point {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *PowerSource) GetRadius() float32 {
	if m != nil && m.Radius != nil {
		return *m.Radius
	}
	return 0
}

func (m *PowerSource) GetTag() uint64 {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return 0
}

type PlayerRaw struct {
	PowerSources     []*PowerSource `protobuf:"bytes,1,rep,name=power_sources,json=powerSources" json:"power_sources,omitempty"`
	Camera           *Point         `protobuf:"bytes,2,opt,name=camera" json:"camera,omitempty"`
	UpgradeIds       []uint32       `protobuf:"varint,3,rep,name=upgrade_ids,json=upgradeIds" json:"upgrade_ids,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *PlayerRaw) Reset()                    { *m = PlayerRaw{} }
func (m *PlayerRaw) String() string            { return proto.CompactTextString(m) }
func (*PlayerRaw) ProtoMessage()               {}
func (*PlayerRaw) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{3} }

func (m *PlayerRaw) GetPowerSources() []*PowerSource {
	if m != nil {
		return m.PowerSources
	}
	return nil
}

func (m *PlayerRaw) GetCamera() *Point {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *PlayerRaw) GetUpgradeIds() []uint32 {
	if m != nil {
		return m.UpgradeIds
	}
	return nil
}

type UnitOrder struct {
	AbilityId *uint32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	// Types that are valid to be assigned to Target:
	//	*UnitOrder_TargetWorldSpacePos
	//	*UnitOrder_TargetUnitTag
	Target           isUnitOrder_Target `protobuf_oneof:"target"`
	Progress         *float32           `protobuf:"fixed32,4,opt,name=progress" json:"progress,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *UnitOrder) Reset()                    { *m = UnitOrder{} }
func (m *UnitOrder) String() string            { return proto.CompactTextString(m) }
func (*UnitOrder) ProtoMessage()               {}
func (*UnitOrder) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{4} }

type isUnitOrder_Target interface {
	isUnitOrder_Target()
}

type UnitOrder_TargetWorldSpacePos struct {
	TargetWorldSpacePos *Point `protobuf:"bytes,2,opt,name=target_world_space_pos,json=targetWorldSpacePos,oneof"`
}
type UnitOrder_TargetUnitTag struct {
	TargetUnitTag uint64 `protobuf:"varint,3,opt,name=target_unit_tag,json=targetUnitTag,oneof"`
}

func (*UnitOrder_TargetWorldSpacePos) isUnitOrder_Target() {}
func (*UnitOrder_TargetUnitTag) isUnitOrder_Target()       {}

func (m *UnitOrder) GetTarget() isUnitOrder_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *UnitOrder) GetAbilityId() uint32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *UnitOrder) GetTargetWorldSpacePos() *Point {
	if x, ok := m.GetTarget().(*UnitOrder_TargetWorldSpacePos); ok {
		return x.TargetWorldSpacePos
	}
	return nil
}

func (m *UnitOrder) GetTargetUnitTag() uint64 {
	if x, ok := m.GetTarget().(*UnitOrder_TargetUnitTag); ok {
		return x.TargetUnitTag
	}
	return 0
}

func (m *UnitOrder) GetProgress() float32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UnitOrder) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UnitOrder_OneofMarshaler, _UnitOrder_OneofUnmarshaler, _UnitOrder_OneofSizer, []interface{}{
		(*UnitOrder_TargetWorldSpacePos)(nil),
		(*UnitOrder_TargetUnitTag)(nil),
	}
}

func _UnitOrder_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UnitOrder)
	// target
	switch x := m.Target.(type) {
	case *UnitOrder_TargetWorldSpacePos:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetWorldSpacePos); err != nil {
			return err
		}
	case *UnitOrder_TargetUnitTag:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TargetUnitTag))
	case nil:
	default:
		return fmt.Errorf("UnitOrder.Target has unexpected type %T", x)
	}
	return nil
}

func _UnitOrder_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UnitOrder)
	switch tag {
	case 2: // target.target_world_space_pos
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Point)
		err := b.DecodeMessage(msg)
		m.Target = &UnitOrder_TargetWorldSpacePos{msg}
		return true, err
	case 3: // target.target_unit_tag
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Target = &UnitOrder_TargetUnitTag{x}
		return true, err
	default:
		return false, nil
	}
}

func _UnitOrder_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UnitOrder)
	// target
	switch x := m.Target.(type) {
	case *UnitOrder_TargetWorldSpacePos:
		s := proto.Size(x.TargetWorldSpacePos)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UnitOrder_TargetUnitTag:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TargetUnitTag))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PassengerUnit struct {
	Tag              *uint64  `protobuf:"varint,1,opt,name=tag" json:"tag,omitempty"`
	Health           *float32 `protobuf:"fixed32,2,opt,name=health" json:"health,omitempty"`
	HealthMax        *float32 `protobuf:"fixed32,3,opt,name=health_max,json=healthMax" json:"health_max,omitempty"`
	Shield           *float32 `protobuf:"fixed32,4,opt,name=shield" json:"shield,omitempty"`
	ShieldMax        *float32 `protobuf:"fixed32,7,opt,name=shield_max,json=shieldMax" json:"shield_max,omitempty"`
	Energy           *float32 `protobuf:"fixed32,5,opt,name=energy" json:"energy,omitempty"`
	EnergyMax        *float32 `protobuf:"fixed32,8,opt,name=energy_max,json=energyMax" json:"energy_max,omitempty"`
	UnitType         *uint32  `protobuf:"varint,6,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PassengerUnit) Reset()                    { *m = PassengerUnit{} }
func (m *PassengerUnit) String() string            { return proto.CompactTextString(m) }
func (*PassengerUnit) ProtoMessage()               {}
func (*PassengerUnit) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{5} }

func (m *PassengerUnit) GetTag() uint64 {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return 0
}

func (m *PassengerUnit) GetHealth() float32 {
	if m != nil && m.Health != nil {
		return *m.Health
	}
	return 0
}

func (m *PassengerUnit) GetHealthMax() float32 {
	if m != nil && m.HealthMax != nil {
		return *m.HealthMax
	}
	return 0
}

func (m *PassengerUnit) GetShield() float32 {
	if m != nil && m.Shield != nil {
		return *m.Shield
	}
	return 0
}

func (m *PassengerUnit) GetShieldMax() float32 {
	if m != nil && m.ShieldMax != nil {
		return *m.ShieldMax
	}
	return 0
}

func (m *PassengerUnit) GetEnergy() float32 {
	if m != nil && m.Energy != nil {
		return *m.Energy
	}
	return 0
}

func (m *PassengerUnit) GetEnergyMax() float32 {
	if m != nil && m.EnergyMax != nil {
		return *m.EnergyMax
	}
	return 0
}

func (m *PassengerUnit) GetUnitType() uint32 {
	if m != nil && m.UnitType != nil {
		return *m.UnitType
	}
	return 0
}

type Unit struct {
	// Fields are populated based on type/alliance
	DisplayType   *DisplayType `protobuf:"varint,1,opt,name=display_type,json=displayType,enum=DisplayType" json:"display_type,omitempty"`
	Alliance      *Alliance    `protobuf:"varint,2,opt,name=alliance,enum=Alliance" json:"alliance,omitempty"`
	Tag           *uint64      `protobuf:"varint,3,opt,name=tag" json:"tag,omitempty"`
	UnitType      *uint32      `protobuf:"varint,4,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
	Owner         *int32       `protobuf:"varint,5,opt,name=owner" json:"owner,omitempty"`
	Pos           *Point       `protobuf:"bytes,6,opt,name=pos" json:"pos,omitempty"`
	Facing        *float32     `protobuf:"fixed32,7,opt,name=facing" json:"facing,omitempty"`
	Radius        *float32     `protobuf:"fixed32,8,opt,name=radius" json:"radius,omitempty"`
	BuildProgress *float32     `protobuf:"fixed32,9,opt,name=build_progress,json=buildProgress" json:"build_progress,omitempty"`
	Cloak         *CloakState  `protobuf:"varint,10,opt,name=cloak,enum=CloakState" json:"cloak,omitempty"`
	DetectRange   *float32     `protobuf:"fixed32,31,opt,name=detect_range,json=detectRange" json:"detect_range,omitempty"`
	RadarRange    *float32     `protobuf:"fixed32,32,opt,name=radar_range,json=radarRange" json:"radar_range,omitempty"`
	IsSelected    *bool        `protobuf:"varint,11,opt,name=is_selected,json=isSelected" json:"is_selected,omitempty"`
	IsOnScreen    *bool        `protobuf:"varint,12,opt,name=is_on_screen,json=isOnScreen" json:"is_on_screen,omitempty"`
	IsBlip        *bool        `protobuf:"varint,13,opt,name=is_blip,json=isBlip" json:"is_blip,omitempty"`
	IsPowered     *bool        `protobuf:"varint,35,opt,name=is_powered,json=isPowered" json:"is_powered,omitempty"`
	// Not populated for snapshots
	Health          *float32 `protobuf:"fixed32,14,opt,name=health" json:"health,omitempty"`
	HealthMax       *float32 `protobuf:"fixed32,15,opt,name=health_max,json=healthMax" json:"health_max,omitempty"`
	Shield          *float32 `protobuf:"fixed32,16,opt,name=shield" json:"shield,omitempty"`
	ShieldMax       *float32 `protobuf:"fixed32,36,opt,name=shield_max,json=shieldMax" json:"shield_max,omitempty"`
	Energy          *float32 `protobuf:"fixed32,17,opt,name=energy" json:"energy,omitempty"`
	EnergyMax       *float32 `protobuf:"fixed32,37,opt,name=energy_max,json=energyMax" json:"energy_max,omitempty"`
	MineralContents *int32   `protobuf:"varint,18,opt,name=mineral_contents,json=mineralContents" json:"mineral_contents,omitempty"`
	VespeneContents *int32   `protobuf:"varint,19,opt,name=vespene_contents,json=vespeneContents" json:"vespene_contents,omitempty"`
	IsFlying        *bool    `protobuf:"varint,20,opt,name=is_flying,json=isFlying" json:"is_flying,omitempty"`
	IsBurrowed      *bool    `protobuf:"varint,21,opt,name=is_burrowed,json=isBurrowed" json:"is_burrowed,omitempty"`
	// Not populated for enemies
	Orders             []*UnitOrder     `protobuf:"bytes,22,rep,name=orders" json:"orders,omitempty"`
	AddOnTag           *uint64          `protobuf:"varint,23,opt,name=add_on_tag,json=addOnTag" json:"add_on_tag,omitempty"`
	Passengers         []*PassengerUnit `protobuf:"bytes,24,rep,name=passengers" json:"passengers,omitempty"`
	CargoSpaceTaken    *int32           `protobuf:"varint,25,opt,name=cargo_space_taken,json=cargoSpaceTaken" json:"cargo_space_taken,omitempty"`
	CargoSpaceMax      *int32           `protobuf:"varint,26,opt,name=cargo_space_max,json=cargoSpaceMax" json:"cargo_space_max,omitempty"`
	BuffIds            []uint32         `protobuf:"varint,27,rep,name=buff_ids,json=buffIds" json:"buff_ids,omitempty"`
	AssignedHarvesters *int32           `protobuf:"varint,28,opt,name=assigned_harvesters,json=assignedHarvesters" json:"assigned_harvesters,omitempty"`
	IdealHarvesters    *int32           `protobuf:"varint,29,opt,name=ideal_harvesters,json=idealHarvesters" json:"ideal_harvesters,omitempty"`
	WeaponCooldown     *float32         `protobuf:"fixed32,30,opt,name=weapon_cooldown,json=weaponCooldown" json:"weapon_cooldown,omitempty"`
	EngagedTargetTag   *uint64          `protobuf:"varint,34,opt,name=engaged_target_tag,json=engagedTargetTag" json:"engaged_target_tag,omitempty"`
	XXX_unrecognized   []byte           `json:"-"`
}

func (m *Unit) Reset()                    { *m = Unit{} }
func (m *Unit) String() string            { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()               {}
func (*Unit) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{6} }

func (m *Unit) GetDisplayType() DisplayType {
	if m != nil && m.DisplayType != nil {
		return *m.DisplayType
	}
	return DisplayType_Visible
}

func (m *Unit) GetAlliance() Alliance {
	if m != nil && m.Alliance != nil {
		return *m.Alliance
	}
	return Alliance_Self
}

func (m *Unit) GetTag() uint64 {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return 0
}

func (m *Unit) GetUnitType() uint32 {
	if m != nil && m.UnitType != nil {
		return *m.UnitType
	}
	return 0
}

func (m *Unit) GetOwner() int32 {
	if m != nil && m.Owner != nil {
		return *m.Owner
	}
	return 0
}

func (m *Unit) GetPos() *Point {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Unit) GetFacing() float32 {
	if m != nil && m.Facing != nil {
		return *m.Facing
	}
	return 0
}

func (m *Unit) GetRadius() float32 {
	if m != nil && m.Radius != nil {
		return *m.Radius
	}
	return 0
}

func (m *Unit) GetBuildProgress() float32 {
	if m != nil && m.BuildProgress != nil {
		return *m.BuildProgress
	}
	return 0
}

func (m *Unit) GetCloak() CloakState {
	if m != nil && m.Cloak != nil {
		return *m.Cloak
	}
	return CloakState_Cloaked
}

func (m *Unit) GetDetectRange() float32 {
	if m != nil && m.DetectRange != nil {
		return *m.DetectRange
	}
	return 0
}

func (m *Unit) GetRadarRange() float32 {
	if m != nil && m.RadarRange != nil {
		return *m.RadarRange
	}
	return 0
}

func (m *Unit) GetIsSelected() bool {
	if m != nil && m.IsSelected != nil {
		return *m.IsSelected
	}
	return false
}

func (m *Unit) GetIsOnScreen() bool {
	if m != nil && m.IsOnScreen != nil {
		return *m.IsOnScreen
	}
	return false
}

func (m *Unit) GetIsBlip() bool {
	if m != nil && m.IsBlip != nil {
		return *m.IsBlip
	}
	return false
}

func (m *Unit) GetIsPowered() bool {
	if m != nil && m.IsPowered != nil {
		return *m.IsPowered
	}
	return false
}

func (m *Unit) GetHealth() float32 {
	if m != nil && m.Health != nil {
		return *m.Health
	}
	return 0
}

func (m *Unit) GetHealthMax() float32 {
	if m != nil && m.HealthMax != nil {
		return *m.HealthMax
	}
	return 0
}

func (m *Unit) GetShield() float32 {
	if m != nil && m.Shield != nil {
		return *m.Shield
	}
	return 0
}

func (m *Unit) GetShieldMax() float32 {
	if m != nil && m.ShieldMax != nil {
		return *m.ShieldMax
	}
	return 0
}

func (m *Unit) GetEnergy() float32 {
	if m != nil && m.Energy != nil {
		return *m.Energy
	}
	return 0
}

func (m *Unit) GetEnergyMax() float32 {
	if m != nil && m.EnergyMax != nil {
		return *m.EnergyMax
	}
	return 0
}

func (m *Unit) GetMineralContents() int32 {
	if m != nil && m.MineralContents != nil {
		return *m.MineralContents
	}
	return 0
}

func (m *Unit) GetVespeneContents() int32 {
	if m != nil && m.VespeneContents != nil {
		return *m.VespeneContents
	}
	return 0
}

func (m *Unit) GetIsFlying() bool {
	if m != nil && m.IsFlying != nil {
		return *m.IsFlying
	}
	return false
}

func (m *Unit) GetIsBurrowed() bool {
	if m != nil && m.IsBurrowed != nil {
		return *m.IsBurrowed
	}
	return false
}

func (m *Unit) GetOrders() []*UnitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *Unit) GetAddOnTag() uint64 {
	if m != nil && m.AddOnTag != nil {
		return *m.AddOnTag
	}
	return 0
}

func (m *Unit) GetPassengers() []*PassengerUnit {
	if m != nil {
		return m.Passengers
	}
	return nil
}

func (m *Unit) GetCargoSpaceTaken() int32 {
	if m != nil && m.CargoSpaceTaken != nil {
		return *m.CargoSpaceTaken
	}
	return 0
}

func (m *Unit) GetCargoSpaceMax() int32 {
	if m != nil && m.CargoSpaceMax != nil {
		return *m.CargoSpaceMax
	}
	return 0
}

func (m *Unit) GetBuffIds() []uint32 {
	if m != nil {
		return m.BuffIds
	}
	return nil
}

func (m *Unit) GetAssignedHarvesters() int32 {
	if m != nil && m.AssignedHarvesters != nil {
		return *m.AssignedHarvesters
	}
	return 0
}

func (m *Unit) GetIdealHarvesters() int32 {
	if m != nil && m.IdealHarvesters != nil {
		return *m.IdealHarvesters
	}
	return 0
}

func (m *Unit) GetWeaponCooldown() float32 {
	if m != nil && m.WeaponCooldown != nil {
		return *m.WeaponCooldown
	}
	return 0
}

func (m *Unit) GetEngagedTargetTag() uint64 {
	if m != nil && m.EngagedTargetTag != nil {
		return *m.EngagedTargetTag
	}
	return 0
}

type MapState struct {
	Visibility       *ImageData `protobuf:"bytes,1,opt,name=visibility" json:"visibility,omitempty"`
	Creep            *ImageData `protobuf:"bytes,2,opt,name=creep" json:"creep,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *MapState) Reset()                    { *m = MapState{} }
func (m *MapState) String() string            { return proto.CompactTextString(m) }
func (*MapState) ProtoMessage()               {}
func (*MapState) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{7} }

func (m *MapState) GetVisibility() *ImageData {
	if m != nil {
		return m.Visibility
	}
	return nil
}

func (m *MapState) GetCreep() *ImageData {
	if m != nil {
		return m.Creep
	}
	return nil
}

type Event struct {
	DeadUnits        []uint64 `protobuf:"varint,1,rep,name=dead_units,json=deadUnits" json:"dead_units,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{8} }

func (m *Event) GetDeadUnits() []uint64 {
	if m != nil {
		return m.DeadUnits
	}
	return nil
}

type Effect struct {
	EffectId         *uint32    `protobuf:"varint,1,opt,name=effect_id,json=effectId" json:"effect_id,omitempty"`
	Pos              []*Point2D `protobuf:"bytes,2,rep,name=pos" json:"pos,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Effect) Reset()                    { *m = Effect{} }
func (m *Effect) String() string            { return proto.CompactTextString(m) }
func (*Effect) ProtoMessage()               {}
func (*Effect) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{9} }

func (m *Effect) GetEffectId() uint32 {
	if m != nil && m.EffectId != nil {
		return *m.EffectId
	}
	return 0
}

func (m *Effect) GetPos() []*Point2D {
	if m != nil {
		return m.Pos
	}
	return nil
}

type ActionRaw struct {
	// Types that are valid to be assigned to Action:
	//	*ActionRaw_UnitCommand
	//	*ActionRaw_CameraMove
	//	*ActionRaw_ToggleAutocast
	Action           isActionRaw_Action `protobuf_oneof:"action"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ActionRaw) Reset()                    { *m = ActionRaw{} }
func (m *ActionRaw) String() string            { return proto.CompactTextString(m) }
func (*ActionRaw) ProtoMessage()               {}
func (*ActionRaw) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{10} }

type isActionRaw_Action interface {
	isActionRaw_Action()
}

type ActionRaw_UnitCommand struct {
	UnitCommand *ActionRawUnitCommand `protobuf:"bytes,1,opt,name=unit_command,json=unitCommand,oneof"`
}
type ActionRaw_CameraMove struct {
	CameraMove *ActionRawCameraMove `protobuf:"bytes,2,opt,name=camera_move,json=cameraMove,oneof"`
}
type ActionRaw_ToggleAutocast struct {
	ToggleAutocast *ActionRawToggleAutocast `protobuf:"bytes,3,opt,name=toggle_autocast,json=toggleAutocast,oneof"`
}

func (*ActionRaw_UnitCommand) isActionRaw_Action()    {}
func (*ActionRaw_CameraMove) isActionRaw_Action()     {}
func (*ActionRaw_ToggleAutocast) isActionRaw_Action() {}

func (m *ActionRaw) GetAction() isActionRaw_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ActionRaw) GetUnitCommand() *ActionRawUnitCommand {
	if x, ok := m.GetAction().(*ActionRaw_UnitCommand); ok {
		return x.UnitCommand
	}
	return nil
}

func (m *ActionRaw) GetCameraMove() *ActionRawCameraMove {
	if x, ok := m.GetAction().(*ActionRaw_CameraMove); ok {
		return x.CameraMove
	}
	return nil
}

func (m *ActionRaw) GetToggleAutocast() *ActionRawToggleAutocast {
	if x, ok := m.GetAction().(*ActionRaw_ToggleAutocast); ok {
		return x.ToggleAutocast
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionRaw) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionRaw_OneofMarshaler, _ActionRaw_OneofUnmarshaler, _ActionRaw_OneofSizer, []interface{}{
		(*ActionRaw_UnitCommand)(nil),
		(*ActionRaw_CameraMove)(nil),
		(*ActionRaw_ToggleAutocast)(nil),
	}
}

func _ActionRaw_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionRaw)
	// action
	switch x := m.Action.(type) {
	case *ActionRaw_UnitCommand:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnitCommand); err != nil {
			return err
		}
	case *ActionRaw_CameraMove:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CameraMove); err != nil {
			return err
		}
	case *ActionRaw_ToggleAutocast:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ToggleAutocast); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActionRaw.Action has unexpected type %T", x)
	}
	return nil
}

func _ActionRaw_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionRaw)
	switch tag {
	case 1: // action.unit_command
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionRawUnitCommand)
		err := b.DecodeMessage(msg)
		m.Action = &ActionRaw_UnitCommand{msg}
		return true, err
	case 2: // action.camera_move
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionRawCameraMove)
		err := b.DecodeMessage(msg)
		m.Action = &ActionRaw_CameraMove{msg}
		return true, err
	case 3: // action.toggle_autocast
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionRawToggleAutocast)
		err := b.DecodeMessage(msg)
		m.Action = &ActionRaw_ToggleAutocast{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActionRaw_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionRaw)
	// action
	switch x := m.Action.(type) {
	case *ActionRaw_UnitCommand:
		s := proto.Size(x.UnitCommand)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionRaw_CameraMove:
		s := proto.Size(x.CameraMove)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionRaw_ToggleAutocast:
		s := proto.Size(x.ToggleAutocast)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionRawUnitCommand struct {
	AbilityId *int32 `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	// Types that are valid to be assigned to Target:
	//	*ActionRawUnitCommand_TargetWorldSpacePos
	//	*ActionRawUnitCommand_TargetUnitTag
	Target           isActionRawUnitCommand_Target `protobuf_oneof:"target"`
	UnitTags         []uint64                      `protobuf:"varint,4,rep,name=unit_tags,json=unitTags" json:"unit_tags,omitempty"`
	QueueCommand     *bool                         `protobuf:"varint,5,opt,name=queue_command,json=queueCommand" json:"queue_command,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *ActionRawUnitCommand) Reset()                    { *m = ActionRawUnitCommand{} }
func (m *ActionRawUnitCommand) String() string            { return proto.CompactTextString(m) }
func (*ActionRawUnitCommand) ProtoMessage()               {}
func (*ActionRawUnitCommand) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{11} }

type isActionRawUnitCommand_Target interface {
	isActionRawUnitCommand_Target()
}

type ActionRawUnitCommand_TargetWorldSpacePos struct {
	TargetWorldSpacePos *Point2D `protobuf:"bytes,2,opt,name=target_world_space_pos,json=targetWorldSpacePos,oneof"`
}
type ActionRawUnitCommand_TargetUnitTag struct {
	TargetUnitTag uint64 `protobuf:"varint,3,opt,name=target_unit_tag,json=targetUnitTag,oneof"`
}

func (*ActionRawUnitCommand_TargetWorldSpacePos) isActionRawUnitCommand_Target() {}
func (*ActionRawUnitCommand_TargetUnitTag) isActionRawUnitCommand_Target()       {}

func (m *ActionRawUnitCommand) GetTarget() isActionRawUnitCommand_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *ActionRawUnitCommand) GetAbilityId() int32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *ActionRawUnitCommand) GetTargetWorldSpacePos() *Point2D {
	if x, ok := m.GetTarget().(*ActionRawUnitCommand_TargetWorldSpacePos); ok {
		return x.TargetWorldSpacePos
	}
	return nil
}

func (m *ActionRawUnitCommand) GetTargetUnitTag() uint64 {
	if x, ok := m.GetTarget().(*ActionRawUnitCommand_TargetUnitTag); ok {
		return x.TargetUnitTag
	}
	return 0
}

func (m *ActionRawUnitCommand) GetUnitTags() []uint64 {
	if m != nil {
		return m.UnitTags
	}
	return nil
}

func (m *ActionRawUnitCommand) GetQueueCommand() bool {
	if m != nil && m.QueueCommand != nil {
		return *m.QueueCommand
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionRawUnitCommand) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionRawUnitCommand_OneofMarshaler, _ActionRawUnitCommand_OneofUnmarshaler, _ActionRawUnitCommand_OneofSizer, []interface{}{
		(*ActionRawUnitCommand_TargetWorldSpacePos)(nil),
		(*ActionRawUnitCommand_TargetUnitTag)(nil),
	}
}

func _ActionRawUnitCommand_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionRawUnitCommand)
	// target
	switch x := m.Target.(type) {
	case *ActionRawUnitCommand_TargetWorldSpacePos:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TargetWorldSpacePos); err != nil {
			return err
		}
	case *ActionRawUnitCommand_TargetUnitTag:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.TargetUnitTag))
	case nil:
	default:
		return fmt.Errorf("ActionRawUnitCommand.Target has unexpected type %T", x)
	}
	return nil
}

func _ActionRawUnitCommand_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionRawUnitCommand)
	switch tag {
	case 2: // target.target_world_space_pos
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Point2D)
		err := b.DecodeMessage(msg)
		m.Target = &ActionRawUnitCommand_TargetWorldSpacePos{msg}
		return true, err
	case 3: // target.target_unit_tag
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Target = &ActionRawUnitCommand_TargetUnitTag{x}
		return true, err
	default:
		return false, nil
	}
}

func _ActionRawUnitCommand_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionRawUnitCommand)
	// target
	switch x := m.Target.(type) {
	case *ActionRawUnitCommand_TargetWorldSpacePos:
		s := proto.Size(x.TargetWorldSpacePos)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionRawUnitCommand_TargetUnitTag:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.TargetUnitTag))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionRawCameraMove struct {
	CenterWorldSpace *Point `protobuf:"bytes,1,opt,name=center_world_space,json=centerWorldSpace" json:"center_world_space,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActionRawCameraMove) Reset()                    { *m = ActionRawCameraMove{} }
func (m *ActionRawCameraMove) String() string            { return proto.CompactTextString(m) }
func (*ActionRawCameraMove) ProtoMessage()               {}
func (*ActionRawCameraMove) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{12} }

func (m *ActionRawCameraMove) GetCenterWorldSpace() *Point {
	if m != nil {
		return m.CenterWorldSpace
	}
	return nil
}

type ActionRawToggleAutocast struct {
	AbilityId        *int32   `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	UnitTags         []uint64 `protobuf:"varint,2,rep,name=unit_tags,json=unitTags" json:"unit_tags,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ActionRawToggleAutocast) Reset()                    { *m = ActionRawToggleAutocast{} }
func (m *ActionRawToggleAutocast) String() string            { return proto.CompactTextString(m) }
func (*ActionRawToggleAutocast) ProtoMessage()               {}
func (*ActionRawToggleAutocast) Descriptor() ([]byte, []int) { return fileDescriptorRaw, []int{13} }

func (m *ActionRawToggleAutocast) GetAbilityId() int32 {
	if m != nil && m.AbilityId != nil {
		return *m.AbilityId
	}
	return 0
}

func (m *ActionRawToggleAutocast) GetUnitTags() []uint64 {
	if m != nil {
		return m.UnitTags
	}
	return nil
}

func init() {
	proto.RegisterType((*StartRaw)(nil), "StartRaw")
	proto.RegisterType((*ObservationRaw)(nil), "ObservationRaw")
	proto.RegisterType((*PowerSource)(nil), "PowerSource")
	proto.RegisterType((*PlayerRaw)(nil), "PlayerRaw")
	proto.RegisterType((*UnitOrder)(nil), "UnitOrder")
	proto.RegisterType((*PassengerUnit)(nil), "PassengerUnit")
	proto.RegisterType((*Unit)(nil), "Unit")
	proto.RegisterType((*MapState)(nil), "MapState")
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*Effect)(nil), "Effect")
	proto.RegisterType((*ActionRaw)(nil), "ActionRaw")
	proto.RegisterType((*ActionRawUnitCommand)(nil), "ActionRawUnitCommand")
	proto.RegisterType((*ActionRawCameraMove)(nil), "ActionRawCameraMove")
	proto.RegisterType((*ActionRawToggleAutocast)(nil), "ActionRawToggleAutocast")
	proto.RegisterEnum("DisplayType", DisplayType_name, DisplayType_value)
	proto.RegisterEnum("Alliance", Alliance_name, Alliance_value)
	proto.RegisterEnum("CloakState", CloakState_name, CloakState_value)
}

func init() { proto.RegisterFile("s2clientprotocol/raw.proto", fileDescriptorRaw) }

var fileDescriptorRaw = []byte{
	// 1608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0xe9, 0x6e, 0x23, 0xc7,
	0x11, 0x16, 0x49, 0x91, 0x1a, 0x16, 0x0f, 0xd1, 0xad, 0x3d, 0x66, 0xb5, 0xde, 0x58, 0xe1, 0xda,
	0xde, 0xb5, 0x92, 0xec, 0x3a, 0x82, 0x13, 0x20, 0x40, 0xe2, 0xac, 0x56, 0xb2, 0x23, 0x02, 0xde,
	0x15, 0xd1, 0x94, 0x13, 0x20, 0x7f, 0x26, 0xad, 0xe9, 0xd2, 0xa8, 0xe1, 0x61, 0xcf, 0xa4, 0xbb,
	0x29, 0x5a, 0xfe, 0x1b, 0xe4, 0x31, 0xfc, 0x3e, 0x79, 0x8f, 0x3c, 0x46, 0xf2, 0x23, 0xe8, 0x83,
	0x87, 0x44, 0x1d, 0x01, 0xfc, 0x6f, 0xea, 0xab, 0xaf, 0x7a, 0xea, 0xea, 0xea, 0x82, 0x6d, 0xbd,
	0x97, 0xe6, 0x02, 0xa5, 0x29, 0x55, 0x61, 0x8a, 0xb4, 0xc8, 0x5f, 0x2b, 0x36, 0x7d, 0xe5, 0x04,
	0xd2, 0x1d, 0x1d, 0xec, 0xed, 0x0f, 0x07, 0xc3, 0xa0, 0xd9, 0x7e, 0xb6, 0xc2, 0x4d, 0x8b, 0xf1,
	0xb8, 0x90, 0x9e, 0xde, 0xff, 0x47, 0x0d, 0xa2, 0x91, 0x61, 0xca, 0x50, 0x36, 0x25, 0x7b, 0x10,
	0x8d, 0x59, 0x99, 0x68, 0xf1, 0x03, 0xc6, 0x95, 0x9d, 0xca, 0xcb, 0xd6, 0xde, 0xe3, 0x57, 0x57,
	0x8f, 0x7b, 0x35, 0x12, 0x3f, 0xe0, 0xde, 0xe1, 0x80, 0x6e, 0x8c, 0x59, 0x69, 0xbf, 0xc9, 0xef,
	0xa1, 0x5d, 0x32, 0x73, 0x2e, 0x64, 0x96, 0x64, 0x4a, 0xf0, 0xb8, 0xea, 0xec, 0x9e, 0x5c, 0xb7,
	0x1b, 0x8c, 0x59, 0x86, 0x87, 0xcc, 0x30, 0xda, 0x0a, 0xf4, 0x3f, 0x29, 0xc1, 0xc9, 0x1b, 0xe8,
	0x1a, 0x54, 0x8a, 0x09, 0x99, 0x9c, 0xa3, 0xc8, 0xce, 0x4d, 0x5c, 0xbb, 0xcf, 0xbe, 0x13, 0x0c,
	0x8e, 0x1c, 0xdf, 0x9e, 0x50, 0xe6, 0x2c, 0xc5, 0x31, 0x4a, 0xe3, 0x3d, 0x58, 0xbf, 0xf7, 0x84,
	0xb9, 0x81, 0xf3, 0xe1, 0x8f, 0x60, 0x81, 0x4b, 0x76, 0x9a, 0x63, 0xc2, 0x14, 0xb2, 0xb8, 0xee,
	0x0e, 0xd8, 0xbe, 0x7e, 0x00, 0xc5, 0xd4, 0x30, 0x99, 0xe5, 0x38, 0xa0, 0xed, 0x99, 0xc1, 0xbe,
	0x42, 0x46, 0xde, 0xc0, 0xa6, 0xb6, 0x29, 0x4c, 0xf2, 0x22, 0x65, 0x46, 0x14, 0x52, 0xc7, 0x8d,
	0x9d, 0xda, 0x4d, 0xd9, 0x1b, 0x16, 0x42, 0x9a, 0xbd, 0x43, 0xda, 0x75, 0xfc, 0x6f, 0x66, 0xf4,
	0xfe, 0x3f, 0xab, 0xd0, 0x3d, 0x3e, 0xd5, 0xa8, 0x2e, 0x1c, 0x60, 0x6b, 0xf1, 0x6b, 0x68, 0xd8,
	0x9f, 0xa0, 0x0a, 0x95, 0x58, 0x89, 0x67, 0xe8, 0xb4, 0x94, 0x4d, 0x69, 0x20, 0x92, 0x5d, 0xa8,
	0x4f, 0xa4, 0x30, 0x3a, 0xae, 0xba, 0xbf, 0x3f, 0xb8, 0x6e, 0xf1, 0xad, 0x14, 0x86, 0x7a, 0x0a,
	0xf9, 0x0d, 0x34, 0x5d, 0xa9, 0x0d, 0x33, 0x18, 0x72, 0x1e, 0x5f, 0xe7, 0xbf, 0x63, 0xe5, 0xc8,
	0xea, 0xa9, 0xed, 0x0a, 0xf7, 0x45, 0x7e, 0x01, 0x75, 0xbc, 0x40, 0x69, 0x42, 0x92, 0x1f, 0x5e,
	0x37, 0xf9, 0xca, 0x2a, 0xa9, 0xe7, 0x90, 0xcf, 0x61, 0x03, 0xcf, 0xce, 0x30, 0x35, 0x3a, 0xae,
	0x3b, 0x8f, 0x1e, 0xad, 0xd0, 0x9d, 0x9a, 0xce, 0x68, 0xfd, 0xbf, 0x41, 0x6b, 0x58, 0x4c, 0x51,
	0x8d, 0x8a, 0x89, 0x4a, 0x91, 0xbc, 0x80, 0x5a, 0x59, 0xe8, 0x90, 0x80, 0x87, 0x37, 0x26, 0x93,
	0x5a, 0x06, 0x79, 0x04, 0x0d, 0xc5, 0xb8, 0x98, 0x68, 0xd7, 0x7e, 0x55, 0x1a, 0x24, 0xd2, 0x83,
	0x9a, 0x61, 0x99, 0x8b, 0x6f, 0x9d, 0xda, 0xcf, 0xfe, 0x8f, 0x15, 0x68, 0xce, 0x33, 0x47, 0xde,
	0x40, 0xa7, 0xb4, 0xff, 0x4b, 0xb4, 0xfb, 0xa1, 0xfd, 0x95, 0xf5, 0xf3, 0xe9, 0xea, 0xaf, 0xe6,
	0x4e, 0xd1, 0x76, 0xb9, 0x10, 0x34, 0xf9, 0x15, 0x34, 0x52, 0x36, 0x46, 0xc5, 0x42, 0xe3, 0xdf,
	0xe2, 0x65, 0x20, 0x91, 0x8f, 0xa0, 0x35, 0x29, 0x33, 0xc5, 0x38, 0x26, 0x82, 0xeb, 0xb8, 0xb6,
	0x53, 0x7b, 0xd9, 0xa1, 0x10, 0xa0, 0x01, 0xd7, 0xfd, 0x7f, 0x55, 0xa0, 0x69, 0xeb, 0x74, 0xac,
	0x38, 0x2a, 0xf2, 0x0c, 0x80, 0x9d, 0x8a, 0x5c, 0x98, 0xcb, 0x44, 0x70, 0x97, 0x87, 0x0e, 0x6d,
	0x06, 0x64, 0xc0, 0xc9, 0x37, 0xf0, 0xc8, 0x30, 0x95, 0xa1, 0x49, 0xa6, 0x85, 0xca, 0x79, 0xa2,
	0x4b, 0x96, 0x62, 0x62, 0x53, 0x76, 0x97, 0x33, 0x47, 0x6b, 0x74, 0xcb, 0x9b, 0xfd, 0xc5, 0x5a,
	0x8d, 0xac, 0xd1, 0xb0, 0xd0, 0xe4, 0x25, 0x6c, 0x86, 0xd3, 0x6c, 0x8b, 0x24, 0xf3, 0xc4, 0x1d,
	0xad, 0xd1, 0x8e, 0x57, 0x58, 0xc7, 0x4e, 0x58, 0x46, 0xb6, 0x21, 0x2a, 0x55, 0x91, 0x29, 0xd4,
	0xda, 0x35, 0x42, 0x95, 0xce, 0xe5, 0xb7, 0x11, 0x34, 0x3c, 0xb9, 0xff, 0xef, 0x0a, 0x74, 0x86,
	0x4c, 0x6b, 0x94, 0x19, 0x2a, 0x6b, 0x3a, 0x2b, 0x47, 0x65, 0x5e, 0x0e, 0x5b, 0xb8, 0x73, 0x64,
	0xb9, 0x39, 0x9f, 0x15, 0xce, 0x4b, 0x36, 0x70, 0xff, 0x95, 0x8c, 0xd9, 0xf7, 0xce, 0x8d, 0x2a,
	0x6d, 0x7a, 0xe4, 0x1d, 0xfb, 0xde, 0x9a, 0xe9, 0x73, 0x81, 0x39, 0x0f, 0xbf, 0x0f, 0x92, 0x35,
	0xf3, 0x5f, 0xce, 0x6c, 0xc3, 0x9b, 0x79, 0x24, 0x98, 0xa1, 0x44, 0x95, 0x5d, 0xba, 0x2b, 0x5e,
	0xa5, 0x41, 0xb2, 0x66, 0xfe, 0xcb, 0x99, 0x45, 0xde, 0xcc, 0x23, 0xd6, 0xec, 0x29, 0x34, 0x7d,
	0x46, 0x2e, 0x4b, 0x8c, 0x1b, 0xae, 0x08, 0x91, 0x05, 0x4e, 0x2e, 0x4b, 0xec, 0xff, 0x08, 0xb0,
	0xee, 0x82, 0xfb, 0x12, 0xda, 0x5c, 0x68, 0x7b, 0x15, 0x3d, 0xd1, 0x46, 0xd9, 0x5d, 0x6d, 0xa5,
	0x43, 0xcf, 0xb1, 0xb6, 0xb4, 0xc5, 0x17, 0x02, 0xf9, 0x02, 0x22, 0x96, 0xe7, 0x82, 0xc9, 0x14,
	0x5d, 0x32, 0xba, 0xab, 0x17, 0x72, 0x3f, 0xe8, 0xe9, 0x9c, 0xb9, 0xda, 0xe1, 0x57, 0xbd, 0x5d,
	0xbf, 0xea, 0x2d, 0x79, 0x00, 0xf5, 0x62, 0x2a, 0x51, 0xb9, 0x04, 0xd4, 0xa9, 0x17, 0x66, 0xf7,
	0xac, 0xf1, 0xff, 0xdc, 0xb3, 0x33, 0x96, 0x0a, 0x99, 0x85, 0xdc, 0x06, 0x69, 0xe9, 0xfe, 0x45,
	0x57, 0xee, 0xdf, 0x27, 0xd0, 0x3d, 0x9d, 0x88, 0x9c, 0x27, 0xf3, 0x76, 0x69, 0x3a, 0x7d, 0xc7,
	0xa1, 0xc3, 0x00, 0x92, 0xcf, 0xa1, 0x9e, 0xe6, 0x05, 0xfb, 0x2e, 0x06, 0x17, 0xf7, 0xca, 0xe4,
	0x3d, 0xb0, 0x4a, 0x3f, 0x8a, 0x3c, 0x91, 0xfc, 0x1c, 0xda, 0x1c, 0x0d, 0xa6, 0x26, 0x51, 0x4c,
	0x66, 0x18, 0x7f, 0xe4, 0x8e, 0x6d, 0x79, 0x8c, 0x5a, 0xc8, 0x5e, 0x35, 0xc5, 0x38, 0x53, 0x81,
	0xb1, 0xe3, 0x18, 0xe0, 0xa0, 0x39, 0x41, 0xe8, 0x44, 0x63, 0x8e, 0xa9, 0x41, 0x1e, 0xb7, 0x76,
	0x2a, 0x2f, 0x23, 0x0a, 0x42, 0x8f, 0x02, 0x42, 0x76, 0xa0, 0x2d, 0x74, 0x52, 0xc8, 0x44, 0xa7,
	0x0a, 0x51, 0xc6, 0xed, 0x19, 0xe3, 0x58, 0x8e, 0x1c, 0x42, 0x1e, 0xc3, 0x86, 0xd0, 0xc9, 0x69,
	0x2e, 0xca, 0xb8, 0xe3, 0x94, 0x0d, 0xa1, 0xdf, 0xe6, 0xa2, 0xb4, 0x1d, 0x25, 0x74, 0xe2, 0x26,
	0x05, 0xf2, 0xf8, 0xb9, 0xd3, 0x35, 0x85, 0x1e, 0x7a, 0x60, 0xa9, 0xed, 0xbb, 0x77, 0xb4, 0xfd,
	0xe6, 0xed, 0x6d, 0xdf, 0xbb, 0xa3, 0xed, 0x3f, 0xbe, 0xbd, 0xed, 0x3f, 0xb8, 0xa3, 0xed, 0x3f,
	0xb9, 0xde, 0xf6, 0x9f, 0x41, 0x6f, 0x2c, 0x24, 0x2a, 0x96, 0x27, 0x69, 0x21, 0x0d, 0x4a, 0xa3,
	0x63, 0xe2, 0xda, 0x66, 0x33, 0xe0, 0x07, 0x01, 0xb6, 0xd4, 0x0b, 0xd4, 0x25, 0x4a, 0x5c, 0x50,
	0xb7, 0x3c, 0x35, 0xe0, 0x73, 0xea, 0x53, 0x68, 0x0a, 0x9d, 0x9c, 0xe5, 0x97, 0xb6, 0x8b, 0x1e,
	0xb8, 0xc4, 0x44, 0x42, 0x7f, 0xed, 0xe4, 0x50, 0x92, 0xd3, 0x89, 0x52, 0xc5, 0x14, 0x79, 0xfc,
	0x70, 0x96, 0xf0, 0xb7, 0x01, 0xb1, 0xaf, 0x62, 0x61, 0x27, 0xa3, 0x8e, 0x1f, 0xb9, 0x49, 0xfd,
	0xe4, 0xa6, 0x37, 0xce, 0xcd, 0x4e, 0x1a, 0x88, 0xe4, 0x43, 0x00, 0xc6, 0xb9, 0x2d, 0xa3, 0xbd,
	0x28, 0x8f, 0xdd, 0x45, 0x89, 0x18, 0xe7, 0xc7, 0xd2, 0x8e, 0xb2, 0x3f, 0x00, 0x94, 0xb3, 0x19,
	0xa5, 0xe3, 0xd8, 0x1d, 0xfa, 0x6c, 0xe5, 0x06, 0x2c, 0x4f, 0x31, 0xba, 0x64, 0x40, 0x76, 0xe1,
	0x83, 0x94, 0xa9, 0xac, 0x08, 0xa3, 0xd7, 0xb0, 0xef, 0x50, 0xc6, 0x4f, 0x7c, 0xe4, 0x4e, 0xe1,
	0xa6, 0xeb, 0x89, 0x85, 0xc9, 0xa7, 0xb0, 0xb9, 0xcc, 0xb5, 0x39, 0xdf, 0x76, 0xcc, 0xce, 0x82,
	0x69, 0xf3, 0xfe, 0x04, 0xa2, 0xd3, 0xc9, 0xd9, 0x99, 0x7b, 0x20, 0x9e, 0xba, 0x07, 0x62, 0xc3,
	0xca, 0x03, 0xae, 0xc9, 0x6b, 0xd8, 0x62, 0x5a, 0x8b, 0x4c, 0x22, 0x4f, 0xce, 0x99, 0xba, 0x40,
	0x6d, 0xac, 0xdb, 0x1f, 0xba, 0x63, 0xc8, 0x4c, 0x75, 0x34, 0xd7, 0xd8, 0xc2, 0x08, 0x8e, 0x2c,
	0x5f, 0x66, 0x3f, 0xf3, 0xee, 0x39, 0x7c, 0x89, 0xfa, 0x02, 0x36, 0xa7, 0xc8, 0xca, 0x42, 0x26,
	0x69, 0x51, 0xe4, 0xbc, 0x98, 0xca, 0xf8, 0x67, 0xae, 0x25, 0xba, 0x1e, 0x3e, 0x08, 0x28, 0xf9,
	0x25, 0x10, 0x94, 0x19, 0xcb, 0x90, 0x27, 0xe1, 0xbd, 0xb0, 0x89, 0xed, 0xbb, 0xc4, 0xf6, 0x82,
	0xe6, 0xc4, 0x29, 0x4e, 0x58, 0xd6, 0xbf, 0x80, 0x68, 0xb6, 0x47, 0x90, 0xdf, 0x01, 0x5c, 0x08,
	0x2d, 0xfc, 0xfb, 0x75, 0xdb, 0x5e, 0xb3, 0xd8, 0xd3, 0x96, 0xc8, 0xe4, 0x35, 0xd4, 0xed, 0x95,
	0x2b, 0xef, 0xdf, 0x2f, 0x3d, 0xaf, 0xff, 0x29, 0xd4, 0xdd, 0x32, 0x62, 0xbb, 0x9c, 0x23, 0xe3,
	0x89, 0x5f, 0x8d, 0xec, 0x03, 0xbf, 0x4e, 0x9b, 0x16, 0xb1, 0xc5, 0xd4, 0xfd, 0x21, 0x34, 0xfc,
	0x16, 0x62, 0x3b, 0xd3, 0xef, 0x21, 0x8b, 0xb7, 0x36, 0xf2, 0xc0, 0x80, 0x93, 0xcf, 0xfc, 0x88,
	0xac, 0xde, 0xbd, 0xd7, 0x59, 0x4e, 0xff, 0xbf, 0x15, 0x68, 0xee, 0xa7, 0xb3, 0x3d, 0x6e, 0x00,
	0x6d, 0x37, 0x8e, 0xed, 0xd6, 0xcd, 0x24, 0x0f, 0x51, 0x7f, 0xbc, 0x32, 0xda, 0x67, 0x06, 0xd6,
	0xab, 0x03, 0xcf, 0x3d, 0x5a, 0xa3, 0xad, 0xc9, 0x42, 0x24, 0x5f, 0x43, 0xcb, 0xaf, 0x11, 0xc9,
	0xb8, 0xb8, 0xc0, 0x90, 0x89, 0xe7, 0xb7, 0x9e, 0x74, 0xe0, 0xb8, 0xef, 0x8a, 0x0b, 0x3c, 0x5a,
	0xa3, 0x90, 0xce, 0x25, 0x42, 0x61, 0xd3, 0x14, 0x59, 0x66, 0xd7, 0xdd, 0x89, 0x29, 0x52, 0xa6,
	0x67, 0x5b, 0xf7, 0x8b, 0x5b, 0xcf, 0x3a, 0x71, 0xfc, 0xfd, 0x40, 0x3f, 0x5a, 0xa3, 0x5d, 0x73,
	0x05, 0xb1, 0xcf, 0x3e, 0x73, 0xe4, 0xfe, 0x7f, 0x2a, 0xf0, 0xe0, 0xa6, 0x68, 0x6e, 0x58, 0x66,
	0xea, 0xcb, 0xcb, 0xcc, 0xfb, 0x7b, 0x96, 0x99, 0xdb, 0x92, 0xfe, 0xd3, 0xd7, 0x99, 0xf9, 0x8b,
	0xc9, 0x32, 0xbb, 0xcf, 0xd8, 0x06, 0xf1, 0x2f, 0x26, 0xcb, 0x34, 0x79, 0x0e, 0x9d, 0xbf, 0x4f,
	0x70, 0x82, 0xf3, 0x02, 0xd6, 0xdd, 0x50, 0x6a, 0x3b, 0x30, 0x84, 0xb6, 0xb4, 0xf4, 0xfc, 0x15,
	0xb6, 0x6e, 0x28, 0x00, 0x39, 0x00, 0x92, 0xa2, 0x34, 0xa8, 0x96, 0x83, 0xbb, 0x7b, 0xb1, 0xed,
	0x79, 0x83, 0x45, 0x50, 0xfd, 0x6f, 0xe1, 0xf1, 0x2d, 0x05, 0xb9, 0x2f, 0xb7, 0x57, 0x22, 0xac,
	0x5e, 0x8d, 0x70, 0xf7, 0x0b, 0x68, 0x2d, 0x2d, 0x25, 0xa4, 0x05, 0x1b, 0x7f, 0xb6, 0xf7, 0x2e,
	0xc7, 0x5e, 0x85, 0xb4, 0x21, 0x1a, 0x49, 0x56, 0xea, 0xf3, 0xc2, 0xf4, 0xaa, 0x04, 0xa0, 0x71,
	0x24, 0x38, 0x47, 0xd9, 0xab, 0xed, 0xfe, 0x16, 0xa2, 0xd9, 0x3a, 0x42, 0x22, 0x58, 0x1f, 0x61,
	0x7e, 0xd6, 0xab, 0xd8, 0xaf, 0xfd, 0x3c, 0xbf, 0xec, 0x55, 0xed, 0x31, 0xef, 0x71, 0x62, 0x14,
	0xcb, 0x7b, 0x35, 0xd2, 0x84, 0xfa, 0x57, 0x12, 0xc7, 0x97, 0xbd, 0xf5, 0xdd, 0x2f, 0x01, 0x16,
	0xcf, 0xb9, 0x65, 0x39, 0x09, 0x79, 0xaf, 0x42, 0xb6, 0x60, 0x33, 0x08, 0x87, 0xee, 0x1d, 0x47,
	0xde, 0xab, 0x92, 0x2e, 0xc0, 0xfb, 0xc2, 0xcc, 0x48, 0xb5, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0xe9, 0x17, 0x92, 0xfc, 0x0e, 0x00, 0x00,
}
