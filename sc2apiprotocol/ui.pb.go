// Code generated by protoc-gen-go. DO NOT EDIT.
// source: s2clientprotocol/ui.proto

/*
Package sc2apiprotocol is a generated protocol buffer package.

It is generated from these files:
	s2clientprotocol/ui.proto

It has these top-level messages:
	ObservationUI
	ControlGroup
	UnitInfo
	SinglePanel
	MultiPanel
	CargoPanel
	ProductionPanel
	ActionUI
	ActionControlGroup
	ActionSelectArmy
	ActionSelectWarpGates
	ActionSelectLarva
	ActionSelectIdleWorker
	ActionMultiPanel
	ActionCargoPanelUnload
	ActionProductionPanelRemoveFromQueue
	ActionToggleAutocast
*/
package sc2apiprotocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ActionControlGroup_ControlGroupAction int32

const (
	ActionControlGroup_Recall         ActionControlGroup_ControlGroupAction = 1
	ActionControlGroup_Set            ActionControlGroup_ControlGroupAction = 2
	ActionControlGroup_Append         ActionControlGroup_ControlGroupAction = 3
	ActionControlGroup_SetAndSteal    ActionControlGroup_ControlGroupAction = 4
	ActionControlGroup_AppendAndSteal ActionControlGroup_ControlGroupAction = 5
)

var ActionControlGroup_ControlGroupAction_name = map[int32]string{
	1: "Recall",
	2: "Set",
	3: "Append",
	4: "SetAndSteal",
	5: "AppendAndSteal",
}
var ActionControlGroup_ControlGroupAction_value = map[string]int32{
	"Recall":         1,
	"Set":            2,
	"Append":         3,
	"SetAndSteal":    4,
	"AppendAndSteal": 5,
}

func (x ActionControlGroup_ControlGroupAction) Enum() *ActionControlGroup_ControlGroupAction {
	p := new(ActionControlGroup_ControlGroupAction)
	*p = x
	return p
}
func (x ActionControlGroup_ControlGroupAction) String() string {
	return proto.EnumName(ActionControlGroup_ControlGroupAction_name, int32(x))
}
func (x *ActionControlGroup_ControlGroupAction) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionControlGroup_ControlGroupAction_value, data, "ActionControlGroup_ControlGroupAction")
	if err != nil {
		return err
	}
	*x = ActionControlGroup_ControlGroupAction(value)
	return nil
}
func (ActionControlGroup_ControlGroupAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorUI, []int{8, 0}
}

type ActionSelectIdleWorker_Type int32

const (
	ActionSelectIdleWorker_Set    ActionSelectIdleWorker_Type = 1
	ActionSelectIdleWorker_Add    ActionSelectIdleWorker_Type = 2
	ActionSelectIdleWorker_All    ActionSelectIdleWorker_Type = 3
	ActionSelectIdleWorker_AddAll ActionSelectIdleWorker_Type = 4
)

var ActionSelectIdleWorker_Type_name = map[int32]string{
	1: "Set",
	2: "Add",
	3: "All",
	4: "AddAll",
}
var ActionSelectIdleWorker_Type_value = map[string]int32{
	"Set":    1,
	"Add":    2,
	"All":    3,
	"AddAll": 4,
}

func (x ActionSelectIdleWorker_Type) Enum() *ActionSelectIdleWorker_Type {
	p := new(ActionSelectIdleWorker_Type)
	*p = x
	return p
}
func (x ActionSelectIdleWorker_Type) String() string {
	return proto.EnumName(ActionSelectIdleWorker_Type_name, int32(x))
}
func (x *ActionSelectIdleWorker_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionSelectIdleWorker_Type_value, data, "ActionSelectIdleWorker_Type")
	if err != nil {
		return err
	}
	*x = ActionSelectIdleWorker_Type(value)
	return nil
}
func (ActionSelectIdleWorker_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorUI, []int{12, 0}
}

type ActionMultiPanel_Type int32

const (
	ActionMultiPanel_SingleSelect      ActionMultiPanel_Type = 1
	ActionMultiPanel_DeselectUnit      ActionMultiPanel_Type = 2
	ActionMultiPanel_SelectAllOfType   ActionMultiPanel_Type = 3
	ActionMultiPanel_DeselectAllOfType ActionMultiPanel_Type = 4
)

var ActionMultiPanel_Type_name = map[int32]string{
	1: "SingleSelect",
	2: "DeselectUnit",
	3: "SelectAllOfType",
	4: "DeselectAllOfType",
}
var ActionMultiPanel_Type_value = map[string]int32{
	"SingleSelect":      1,
	"DeselectUnit":      2,
	"SelectAllOfType":   3,
	"DeselectAllOfType": 4,
}

func (x ActionMultiPanel_Type) Enum() *ActionMultiPanel_Type {
	p := new(ActionMultiPanel_Type)
	*p = x
	return p
}
func (x ActionMultiPanel_Type) String() string {
	return proto.EnumName(ActionMultiPanel_Type_name, int32(x))
}
func (x *ActionMultiPanel_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ActionMultiPanel_Type_value, data, "ActionMultiPanel_Type")
	if err != nil {
		return err
	}
	*x = ActionMultiPanel_Type(value)
	return nil
}
func (ActionMultiPanel_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorUI, []int{13, 0} }

type ObservationUI struct {
	Groups []*ControlGroup `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
	// Types that are valid to be assigned to Panel:
	//	*ObservationUI_Single
	//	*ObservationUI_Multi
	//	*ObservationUI_Cargo
	//	*ObservationUI_Production
	Panel            isObservationUI_Panel `protobuf_oneof:"panel"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *ObservationUI) Reset()                    { *m = ObservationUI{} }
func (m *ObservationUI) String() string            { return proto.CompactTextString(m) }
func (*ObservationUI) ProtoMessage()               {}
func (*ObservationUI) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{0} }

type isObservationUI_Panel interface {
	isObservationUI_Panel()
}

type ObservationUI_Single struct {
	Single *SinglePanel `protobuf:"bytes,2,opt,name=single,oneof"`
}
type ObservationUI_Multi struct {
	Multi *MultiPanel `protobuf:"bytes,3,opt,name=multi,oneof"`
}
type ObservationUI_Cargo struct {
	Cargo *CargoPanel `protobuf:"bytes,4,opt,name=cargo,oneof"`
}
type ObservationUI_Production struct {
	Production *ProductionPanel `protobuf:"bytes,5,opt,name=production,oneof"`
}

func (*ObservationUI_Single) isObservationUI_Panel()     {}
func (*ObservationUI_Multi) isObservationUI_Panel()      {}
func (*ObservationUI_Cargo) isObservationUI_Panel()      {}
func (*ObservationUI_Production) isObservationUI_Panel() {}

func (m *ObservationUI) GetPanel() isObservationUI_Panel {
	if m != nil {
		return m.Panel
	}
	return nil
}

func (m *ObservationUI) GetGroups() []*ControlGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *ObservationUI) GetSingle() *SinglePanel {
	if x, ok := m.GetPanel().(*ObservationUI_Single); ok {
		return x.Single
	}
	return nil
}

func (m *ObservationUI) GetMulti() *MultiPanel {
	if x, ok := m.GetPanel().(*ObservationUI_Multi); ok {
		return x.Multi
	}
	return nil
}

func (m *ObservationUI) GetCargo() *CargoPanel {
	if x, ok := m.GetPanel().(*ObservationUI_Cargo); ok {
		return x.Cargo
	}
	return nil
}

func (m *ObservationUI) GetProduction() *ProductionPanel {
	if x, ok := m.GetPanel().(*ObservationUI_Production); ok {
		return x.Production
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ObservationUI) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ObservationUI_OneofMarshaler, _ObservationUI_OneofUnmarshaler, _ObservationUI_OneofSizer, []interface{}{
		(*ObservationUI_Single)(nil),
		(*ObservationUI_Multi)(nil),
		(*ObservationUI_Cargo)(nil),
		(*ObservationUI_Production)(nil),
	}
}

func _ObservationUI_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ObservationUI)
	// panel
	switch x := m.Panel.(type) {
	case *ObservationUI_Single:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Single); err != nil {
			return err
		}
	case *ObservationUI_Multi:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Multi); err != nil {
			return err
		}
	case *ObservationUI_Cargo:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cargo); err != nil {
			return err
		}
	case *ObservationUI_Production:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Production); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ObservationUI.Panel has unexpected type %T", x)
	}
	return nil
}

func _ObservationUI_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ObservationUI)
	switch tag {
	case 2: // panel.single
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SinglePanel)
		err := b.DecodeMessage(msg)
		m.Panel = &ObservationUI_Single{msg}
		return true, err
	case 3: // panel.multi
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MultiPanel)
		err := b.DecodeMessage(msg)
		m.Panel = &ObservationUI_Multi{msg}
		return true, err
	case 4: // panel.cargo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CargoPanel)
		err := b.DecodeMessage(msg)
		m.Panel = &ObservationUI_Cargo{msg}
		return true, err
	case 5: // panel.production
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProductionPanel)
		err := b.DecodeMessage(msg)
		m.Panel = &ObservationUI_Production{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ObservationUI_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ObservationUI)
	// panel
	switch x := m.Panel.(type) {
	case *ObservationUI_Single:
		s := proto.Size(x.Single)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObservationUI_Multi:
		s := proto.Size(x.Multi)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObservationUI_Cargo:
		s := proto.Size(x.Cargo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObservationUI_Production:
		s := proto.Size(x.Production)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ControlGroup struct {
	ControlGroupIndex uint32 `protobuf:"varint,1,opt,name=control_group_index,json=controlGroupIndex" json:"control_group_index,omitempty"`
	LeaderUnitType    uint32 `protobuf:"varint,2,opt,name=leader_unit_type,json=leaderUnitType" json:"leader_unit_type,omitempty"`
	Count             uint32 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *ControlGroup) Reset()                    { *m = ControlGroup{} }
func (m *ControlGroup) String() string            { return proto.CompactTextString(m) }
func (*ControlGroup) ProtoMessage()               {}
func (*ControlGroup) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{1} }

func (m *ControlGroup) GetControlGroupIndex() uint32 {
	if m != nil {
		return m.ControlGroupIndex
	}
	return 0
}

func (m *ControlGroup) GetLeaderUnitType() uint32 {
	if m != nil {
		return m.LeaderUnitType
	}
	return 0
}

func (m *ControlGroup) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type UnitInfo struct {
	UnitType            uint32    `protobuf:"varint,1,opt,name=unit_type,json=unitType" json:"unit_type,omitempty"`
	PlayerRelative      uint32    `protobuf:"varint,2,opt,name=player_relative,json=playerRelative" json:"player_relative,omitempty"`
	Health              int32     `protobuf:"varint,3,opt,name=health" json:"health,omitempty"`
	Shields             int32     `protobuf:"varint,4,opt,name=shields" json:"shields,omitempty"`
	Energy              int32     `protobuf:"varint,5,opt,name=energy" json:"energy,omitempty"`
	TransportSlotsTaken int32     `protobuf:"varint,6,opt,name=transport_slots_taken,json=transportSlotsTaken" json:"transport_slots_taken,omitempty"`
	BuildProgress       float32   `protobuf:"fixed32,7,opt,name=build_progress,json=buildProgress" json:"build_progress,omitempty"`
	AddOn               *UnitInfo `protobuf:"bytes,8,opt,name=add_on,json=addOn" json:"add_on,omitempty"`
	XXX_unrecognized    []byte    `json:"-"`
}

func (m *UnitInfo) Reset()                    { *m = UnitInfo{} }
func (m *UnitInfo) String() string            { return proto.CompactTextString(m) }
func (*UnitInfo) ProtoMessage()               {}
func (*UnitInfo) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{2} }

func (m *UnitInfo) GetUnitType() uint32 {
	if m != nil {
		return m.UnitType
	}
	return 0
}

func (m *UnitInfo) GetPlayerRelative() uint32 {
	if m != nil {
		return m.PlayerRelative
	}
	return 0
}

func (m *UnitInfo) GetHealth() int32 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *UnitInfo) GetShields() int32 {
	if m != nil {
		return m.Shields
	}
	return 0
}

func (m *UnitInfo) GetEnergy() int32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *UnitInfo) GetTransportSlotsTaken() int32 {
	if m != nil {
		return m.TransportSlotsTaken
	}
	return 0
}

func (m *UnitInfo) GetBuildProgress() float32 {
	if m != nil {
		return m.BuildProgress
	}
	return 0
}

func (m *UnitInfo) GetAddOn() *UnitInfo {
	if m != nil {
		return m.AddOn
	}
	return nil
}

type SinglePanel struct {
	Unit             *UnitInfo `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *SinglePanel) Reset()                    { *m = SinglePanel{} }
func (m *SinglePanel) String() string            { return proto.CompactTextString(m) }
func (*SinglePanel) ProtoMessage()               {}
func (*SinglePanel) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{3} }

func (m *SinglePanel) GetUnit() *UnitInfo {
	if m != nil {
		return m.Unit
	}
	return nil
}

type MultiPanel struct {
	Units            []*UnitInfo `protobuf:"bytes,1,rep,name=units" json:"units,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MultiPanel) Reset()                    { *m = MultiPanel{} }
func (m *MultiPanel) String() string            { return proto.CompactTextString(m) }
func (*MultiPanel) ProtoMessage()               {}
func (*MultiPanel) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{4} }

func (m *MultiPanel) GetUnits() []*UnitInfo {
	if m != nil {
		return m.Units
	}
	return nil
}

type CargoPanel struct {
	Unit             *UnitInfo   `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
	Passengers       []*UnitInfo `protobuf:"bytes,2,rep,name=passengers" json:"passengers,omitempty"`
	SlotsAvailable   int32       `protobuf:"varint,3,opt,name=slots_available,json=slotsAvailable" json:"slots_available,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *CargoPanel) Reset()                    { *m = CargoPanel{} }
func (m *CargoPanel) String() string            { return proto.CompactTextString(m) }
func (*CargoPanel) ProtoMessage()               {}
func (*CargoPanel) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{5} }

func (m *CargoPanel) GetUnit() *UnitInfo {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *CargoPanel) GetPassengers() []*UnitInfo {
	if m != nil {
		return m.Passengers
	}
	return nil
}

func (m *CargoPanel) GetSlotsAvailable() int32 {
	if m != nil {
		return m.SlotsAvailable
	}
	return 0
}

type ProductionPanel struct {
	Unit             *UnitInfo   `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
	BuildQueue       []*UnitInfo `protobuf:"bytes,2,rep,name=build_queue,json=buildQueue" json:"build_queue,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ProductionPanel) Reset()                    { *m = ProductionPanel{} }
func (m *ProductionPanel) String() string            { return proto.CompactTextString(m) }
func (*ProductionPanel) ProtoMessage()               {}
func (*ProductionPanel) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{6} }

func (m *ProductionPanel) GetUnit() *UnitInfo {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *ProductionPanel) GetBuildQueue() []*UnitInfo {
	if m != nil {
		return m.BuildQueue
	}
	return nil
}

type ActionUI struct {
	// Types that are valid to be assigned to Action:
	//	*ActionUI_ControlGroup
	//	*ActionUI_SelectArmy
	//	*ActionUI_SelectWarpGates
	//	*ActionUI_SelectLarva
	//	*ActionUI_SelectIdleWorker
	//	*ActionUI_MultiPanel
	//	*ActionUI_CargoPanel
	//	*ActionUI_ProductionPanel
	//	*ActionUI_ToggleAutocast
	Action           isActionUI_Action `protobuf_oneof:"action"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ActionUI) Reset()                    { *m = ActionUI{} }
func (m *ActionUI) String() string            { return proto.CompactTextString(m) }
func (*ActionUI) ProtoMessage()               {}
func (*ActionUI) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{7} }

type isActionUI_Action interface {
	isActionUI_Action()
}

type ActionUI_ControlGroup struct {
	ControlGroup *ActionControlGroup `protobuf:"bytes,1,opt,name=control_group,json=controlGroup,oneof"`
}
type ActionUI_SelectArmy struct {
	SelectArmy *ActionSelectArmy `protobuf:"bytes,2,opt,name=select_army,json=selectArmy,oneof"`
}
type ActionUI_SelectWarpGates struct {
	SelectWarpGates *ActionSelectWarpGates `protobuf:"bytes,3,opt,name=select_warp_gates,json=selectWarpGates,oneof"`
}
type ActionUI_SelectLarva struct {
	SelectLarva *ActionSelectLarva `protobuf:"bytes,4,opt,name=select_larva,json=selectLarva,oneof"`
}
type ActionUI_SelectIdleWorker struct {
	SelectIdleWorker *ActionSelectIdleWorker `protobuf:"bytes,5,opt,name=select_idle_worker,json=selectIdleWorker,oneof"`
}
type ActionUI_MultiPanel struct {
	MultiPanel *ActionMultiPanel `protobuf:"bytes,6,opt,name=multi_panel,json=multiPanel,oneof"`
}
type ActionUI_CargoPanel struct {
	CargoPanel *ActionCargoPanelUnload `protobuf:"bytes,7,opt,name=cargo_panel,json=cargoPanel,oneof"`
}
type ActionUI_ProductionPanel struct {
	ProductionPanel *ActionProductionPanelRemoveFromQueue `protobuf:"bytes,8,opt,name=production_panel,json=productionPanel,oneof"`
}
type ActionUI_ToggleAutocast struct {
	ToggleAutocast *ActionToggleAutocast `protobuf:"bytes,9,opt,name=toggle_autocast,json=toggleAutocast,oneof"`
}

func (*ActionUI_ControlGroup) isActionUI_Action()     {}
func (*ActionUI_SelectArmy) isActionUI_Action()       {}
func (*ActionUI_SelectWarpGates) isActionUI_Action()  {}
func (*ActionUI_SelectLarva) isActionUI_Action()      {}
func (*ActionUI_SelectIdleWorker) isActionUI_Action() {}
func (*ActionUI_MultiPanel) isActionUI_Action()       {}
func (*ActionUI_CargoPanel) isActionUI_Action()       {}
func (*ActionUI_ProductionPanel) isActionUI_Action()  {}
func (*ActionUI_ToggleAutocast) isActionUI_Action()   {}

func (m *ActionUI) GetAction() isActionUI_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ActionUI) GetControlGroup() *ActionControlGroup {
	if x, ok := m.GetAction().(*ActionUI_ControlGroup); ok {
		return x.ControlGroup
	}
	return nil
}

func (m *ActionUI) GetSelectArmy() *ActionSelectArmy {
	if x, ok := m.GetAction().(*ActionUI_SelectArmy); ok {
		return x.SelectArmy
	}
	return nil
}

func (m *ActionUI) GetSelectWarpGates() *ActionSelectWarpGates {
	if x, ok := m.GetAction().(*ActionUI_SelectWarpGates); ok {
		return x.SelectWarpGates
	}
	return nil
}

func (m *ActionUI) GetSelectLarva() *ActionSelectLarva {
	if x, ok := m.GetAction().(*ActionUI_SelectLarva); ok {
		return x.SelectLarva
	}
	return nil
}

func (m *ActionUI) GetSelectIdleWorker() *ActionSelectIdleWorker {
	if x, ok := m.GetAction().(*ActionUI_SelectIdleWorker); ok {
		return x.SelectIdleWorker
	}
	return nil
}

func (m *ActionUI) GetMultiPanel() *ActionMultiPanel {
	if x, ok := m.GetAction().(*ActionUI_MultiPanel); ok {
		return x.MultiPanel
	}
	return nil
}

func (m *ActionUI) GetCargoPanel() *ActionCargoPanelUnload {
	if x, ok := m.GetAction().(*ActionUI_CargoPanel); ok {
		return x.CargoPanel
	}
	return nil
}

func (m *ActionUI) GetProductionPanel() *ActionProductionPanelRemoveFromQueue {
	if x, ok := m.GetAction().(*ActionUI_ProductionPanel); ok {
		return x.ProductionPanel
	}
	return nil
}

func (m *ActionUI) GetToggleAutocast() *ActionToggleAutocast {
	if x, ok := m.GetAction().(*ActionUI_ToggleAutocast); ok {
		return x.ToggleAutocast
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ActionUI) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ActionUI_OneofMarshaler, _ActionUI_OneofUnmarshaler, _ActionUI_OneofSizer, []interface{}{
		(*ActionUI_ControlGroup)(nil),
		(*ActionUI_SelectArmy)(nil),
		(*ActionUI_SelectWarpGates)(nil),
		(*ActionUI_SelectLarva)(nil),
		(*ActionUI_SelectIdleWorker)(nil),
		(*ActionUI_MultiPanel)(nil),
		(*ActionUI_CargoPanel)(nil),
		(*ActionUI_ProductionPanel)(nil),
		(*ActionUI_ToggleAutocast)(nil),
	}
}

func _ActionUI_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ActionUI)
	// action
	switch x := m.Action.(type) {
	case *ActionUI_ControlGroup:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ControlGroup); err != nil {
			return err
		}
	case *ActionUI_SelectArmy:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectArmy); err != nil {
			return err
		}
	case *ActionUI_SelectWarpGates:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectWarpGates); err != nil {
			return err
		}
	case *ActionUI_SelectLarva:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectLarva); err != nil {
			return err
		}
	case *ActionUI_SelectIdleWorker:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SelectIdleWorker); err != nil {
			return err
		}
	case *ActionUI_MultiPanel:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MultiPanel); err != nil {
			return err
		}
	case *ActionUI_CargoPanel:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CargoPanel); err != nil {
			return err
		}
	case *ActionUI_ProductionPanel:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProductionPanel); err != nil {
			return err
		}
	case *ActionUI_ToggleAutocast:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ToggleAutocast); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ActionUI.Action has unexpected type %T", x)
	}
	return nil
}

func _ActionUI_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ActionUI)
	switch tag {
	case 1: // action.control_group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionControlGroup)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_ControlGroup{msg}
		return true, err
	case 2: // action.select_army
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSelectArmy)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_SelectArmy{msg}
		return true, err
	case 3: // action.select_warp_gates
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSelectWarpGates)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_SelectWarpGates{msg}
		return true, err
	case 4: // action.select_larva
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSelectLarva)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_SelectLarva{msg}
		return true, err
	case 5: // action.select_idle_worker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionSelectIdleWorker)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_SelectIdleWorker{msg}
		return true, err
	case 6: // action.multi_panel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionMultiPanel)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_MultiPanel{msg}
		return true, err
	case 7: // action.cargo_panel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionCargoPanelUnload)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_CargoPanel{msg}
		return true, err
	case 8: // action.production_panel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionProductionPanelRemoveFromQueue)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_ProductionPanel{msg}
		return true, err
	case 9: // action.toggle_autocast
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionToggleAutocast)
		err := b.DecodeMessage(msg)
		m.Action = &ActionUI_ToggleAutocast{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ActionUI_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ActionUI)
	// action
	switch x := m.Action.(type) {
	case *ActionUI_ControlGroup:
		s := proto.Size(x.ControlGroup)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_SelectArmy:
		s := proto.Size(x.SelectArmy)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_SelectWarpGates:
		s := proto.Size(x.SelectWarpGates)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_SelectLarva:
		s := proto.Size(x.SelectLarva)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_SelectIdleWorker:
		s := proto.Size(x.SelectIdleWorker)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_MultiPanel:
		s := proto.Size(x.MultiPanel)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_CargoPanel:
		s := proto.Size(x.CargoPanel)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_ProductionPanel:
		s := proto.Size(x.ProductionPanel)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ActionUI_ToggleAutocast:
		s := proto.Size(x.ToggleAutocast)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionControlGroup struct {
	Action            ActionControlGroup_ControlGroupAction `protobuf:"varint,1,opt,name=action,enum=ActionControlGroup_ControlGroupAction" json:"action,omitempty"`
	ControlGroupIndex uint32                                `protobuf:"varint,2,opt,name=control_group_index,json=controlGroupIndex" json:"control_group_index,omitempty"`
	XXX_unrecognized  []byte                                `json:"-"`
}

func (m *ActionControlGroup) Reset()                    { *m = ActionControlGroup{} }
func (m *ActionControlGroup) String() string            { return proto.CompactTextString(m) }
func (*ActionControlGroup) ProtoMessage()               {}
func (*ActionControlGroup) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{8} }

func (m *ActionControlGroup) GetAction() ActionControlGroup_ControlGroupAction {
	if m != nil {
		return m.Action
	}
	return ActionControlGroup_Recall
}

func (m *ActionControlGroup) GetControlGroupIndex() uint32 {
	if m != nil {
		return m.ControlGroupIndex
	}
	return 0
}

type ActionSelectArmy struct {
	SelectionAdd     bool   `protobuf:"varint,1,opt,name=selection_add,json=selectionAdd" json:"selection_add,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActionSelectArmy) Reset()                    { *m = ActionSelectArmy{} }
func (m *ActionSelectArmy) String() string            { return proto.CompactTextString(m) }
func (*ActionSelectArmy) ProtoMessage()               {}
func (*ActionSelectArmy) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{9} }

func (m *ActionSelectArmy) GetSelectionAdd() bool {
	if m != nil {
		return m.SelectionAdd
	}
	return false
}

type ActionSelectWarpGates struct {
	SelectionAdd     bool   `protobuf:"varint,1,opt,name=selection_add,json=selectionAdd" json:"selection_add,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActionSelectWarpGates) Reset()                    { *m = ActionSelectWarpGates{} }
func (m *ActionSelectWarpGates) String() string            { return proto.CompactTextString(m) }
func (*ActionSelectWarpGates) ProtoMessage()               {}
func (*ActionSelectWarpGates) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{10} }

func (m *ActionSelectWarpGates) GetSelectionAdd() bool {
	if m != nil {
		return m.SelectionAdd
	}
	return false
}

type ActionSelectLarva struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActionSelectLarva) Reset()                    { *m = ActionSelectLarva{} }
func (m *ActionSelectLarva) String() string            { return proto.CompactTextString(m) }
func (*ActionSelectLarva) ProtoMessage()               {}
func (*ActionSelectLarva) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{11} }

type ActionSelectIdleWorker struct {
	Type             ActionSelectIdleWorker_Type `protobuf:"varint,1,opt,name=type,enum=ActionSelectIdleWorker_Type" json:"type,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *ActionSelectIdleWorker) Reset()                    { *m = ActionSelectIdleWorker{} }
func (m *ActionSelectIdleWorker) String() string            { return proto.CompactTextString(m) }
func (*ActionSelectIdleWorker) ProtoMessage()               {}
func (*ActionSelectIdleWorker) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{12} }

func (m *ActionSelectIdleWorker) GetType() ActionSelectIdleWorker_Type {
	if m != nil {
		return m.Type
	}
	return ActionSelectIdleWorker_Set
}

type ActionMultiPanel struct {
	Type             ActionMultiPanel_Type `protobuf:"varint,1,opt,name=type,enum=ActionMultiPanel_Type" json:"type,omitempty"`
	UnitIndex        int32                 `protobuf:"varint,2,opt,name=unit_index,json=unitIndex" json:"unit_index,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *ActionMultiPanel) Reset()                    { *m = ActionMultiPanel{} }
func (m *ActionMultiPanel) String() string            { return proto.CompactTextString(m) }
func (*ActionMultiPanel) ProtoMessage()               {}
func (*ActionMultiPanel) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{13} }

func (m *ActionMultiPanel) GetType() ActionMultiPanel_Type {
	if m != nil {
		return m.Type
	}
	return ActionMultiPanel_SingleSelect
}

func (m *ActionMultiPanel) GetUnitIndex() int32 {
	if m != nil {
		return m.UnitIndex
	}
	return 0
}

type ActionCargoPanelUnload struct {
	UnitIndex        int32  `protobuf:"varint,1,opt,name=unit_index,json=unitIndex" json:"unit_index,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActionCargoPanelUnload) Reset()                    { *m = ActionCargoPanelUnload{} }
func (m *ActionCargoPanelUnload) String() string            { return proto.CompactTextString(m) }
func (*ActionCargoPanelUnload) ProtoMessage()               {}
func (*ActionCargoPanelUnload) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{14} }

func (m *ActionCargoPanelUnload) GetUnitIndex() int32 {
	if m != nil {
		return m.UnitIndex
	}
	return 0
}

type ActionProductionPanelRemoveFromQueue struct {
	UnitIndex        int32  `protobuf:"varint,1,opt,name=unit_index,json=unitIndex" json:"unit_index,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActionProductionPanelRemoveFromQueue) Reset()         { *m = ActionProductionPanelRemoveFromQueue{} }
func (m *ActionProductionPanelRemoveFromQueue) String() string { return proto.CompactTextString(m) }
func (*ActionProductionPanelRemoveFromQueue) ProtoMessage()    {}
func (*ActionProductionPanelRemoveFromQueue) Descriptor() ([]byte, []int) {
	return fileDescriptorUI, []int{15}
}

func (m *ActionProductionPanelRemoveFromQueue) GetUnitIndex() int32 {
	if m != nil {
		return m.UnitIndex
	}
	return 0
}

type ActionToggleAutocast struct {
	AbilityId        int32  `protobuf:"varint,1,opt,name=ability_id,json=abilityId" json:"ability_id,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ActionToggleAutocast) Reset()                    { *m = ActionToggleAutocast{} }
func (m *ActionToggleAutocast) String() string            { return proto.CompactTextString(m) }
func (*ActionToggleAutocast) ProtoMessage()               {}
func (*ActionToggleAutocast) Descriptor() ([]byte, []int) { return fileDescriptorUI, []int{16} }

func (m *ActionToggleAutocast) GetAbilityId() int32 {
	if m != nil {
		return m.AbilityId
	}
	return 0
}

func init() {
	proto.RegisterType((*ObservationUI)(nil), "ObservationUI")
	proto.RegisterType((*ControlGroup)(nil), "ControlGroup")
	proto.RegisterType((*UnitInfo)(nil), "UnitInfo")
	proto.RegisterType((*SinglePanel)(nil), "SinglePanel")
	proto.RegisterType((*MultiPanel)(nil), "MultiPanel")
	proto.RegisterType((*CargoPanel)(nil), "CargoPanel")
	proto.RegisterType((*ProductionPanel)(nil), "ProductionPanel")
	proto.RegisterType((*ActionUI)(nil), "ActionUI")
	proto.RegisterType((*ActionControlGroup)(nil), "ActionControlGroup")
	proto.RegisterType((*ActionSelectArmy)(nil), "ActionSelectArmy")
	proto.RegisterType((*ActionSelectWarpGates)(nil), "ActionSelectWarpGates")
	proto.RegisterType((*ActionSelectLarva)(nil), "ActionSelectLarva")
	proto.RegisterType((*ActionSelectIdleWorker)(nil), "ActionSelectIdleWorker")
	proto.RegisterType((*ActionMultiPanel)(nil), "ActionMultiPanel")
	proto.RegisterType((*ActionCargoPanelUnload)(nil), "ActionCargoPanelUnload")
	proto.RegisterType((*ActionProductionPanelRemoveFromQueue)(nil), "ActionProductionPanelRemoveFromQueue")
	proto.RegisterType((*ActionToggleAutocast)(nil), "ActionToggleAutocast")
	proto.RegisterEnum("ActionControlGroup_ControlGroupAction", ActionControlGroup_ControlGroupAction_name, ActionControlGroup_ControlGroupAction_value)
	proto.RegisterEnum("ActionSelectIdleWorker_Type", ActionSelectIdleWorker_Type_name, ActionSelectIdleWorker_Type_value)
	proto.RegisterEnum("ActionMultiPanel_Type", ActionMultiPanel_Type_name, ActionMultiPanel_Type_value)
}

func init() { proto.RegisterFile("s2clientprotocol/ui.proto", fileDescriptorUI) }

var fileDescriptorUI = []byte{
	// 1090 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x25, 0x51, 0x56, 0x46, 0x96, 0x44, 0xaf, 0x93, 0x80, 0x6d, 0x5a, 0xd4, 0x65, 0x93,
	0xd6, 0x40, 0x5b, 0x05, 0x10, 0x62, 0xa4, 0x41, 0x03, 0x14, 0x8a, 0xdb, 0x44, 0x02, 0x1a, 0xd8,
	0x5d, 0xd9, 0x09, 0xd0, 0x0b, 0xb1, 0xe6, 0x6e, 0x64, 0x22, 0x2b, 0x92, 0x5d, 0x2e, 0x9d, 0xaa,
	0x87, 0x9e, 0xfb, 0x12, 0xbd, 0xf6, 0xdc, 0x87, 0xe8, 0x6b, 0xf4, 0x19, 0xfa, 0x0a, 0xc5, 0x2e,
	0x97, 0xfa, 0xa1, 0x65, 0xd9, 0xb9, 0x71, 0x67, 0xbf, 0x6f, 0x66, 0x39, 0x33, 0xdf, 0x0c, 0x7c,
	0x90, 0xf6, 0x03, 0x1e, 0xb2, 0x48, 0x26, 0x22, 0x96, 0x71, 0x10, 0xf3, 0x87, 0x59, 0xd8, 0xd3,
	0xdf, 0xa8, 0x33, 0x3e, 0xec, 0x0f, 0x8e, 0x47, 0xc7, 0xe6, 0xc2, 0xfb, 0xbb, 0x0a, 0xed, 0xa3,
	0xb3, 0x94, 0x89, 0x0b, 0x22, 0xc3, 0x38, 0x3a, 0x1d, 0xa1, 0x47, 0xd0, 0x98, 0x88, 0x38, 0x4b,
	0x52, 0xd7, 0xda, 0xab, 0xed, 0xb7, 0xfa, 0x1f, 0xf5, 0x56, 0x29, 0xbd, 0xc3, 0x38, 0x92, 0x22,
	0xe6, 0x2f, 0x14, 0x08, 0x1b, 0x2c, 0x3a, 0x80, 0x46, 0x1a, 0x46, 0x13, 0xce, 0xdc, 0xea, 0x9e,
	0xb5, 0xdf, 0xea, 0xdf, 0x2b, 0xb3, 0xc6, 0xfa, 0xf6, 0x98, 0x44, 0x8c, 0x0f, 0x2b, 0xd8, 0x80,
	0x51, 0x1f, 0xec, 0x69, 0xc6, 0x65, 0xe8, 0xd6, 0x34, 0xeb, 0xc3, 0x32, 0xeb, 0xa5, 0xba, 0x2c,
	0x48, 0x39, 0x54, 0x71, 0x02, 0x22, 0x26, 0xb1, 0x5b, 0x5f, 0xcf, 0x39, 0x54, 0x97, 0x73, 0x8e,
	0x86, 0xa2, 0x01, 0x40, 0x22, 0x62, 0x9a, 0x05, 0xea, 0x27, 0x5d, 0x5b, 0x13, 0x3f, 0x29, 0x13,
	0x8f, 0xe7, 0x88, 0x82, 0xbd, 0x44, 0x7a, 0xb6, 0x05, 0x76, 0xa2, 0xcc, 0xde, 0xef, 0xb0, 0xbd,
	0x9c, 0x02, 0xd4, 0x83, 0xdd, 0x20, 0x3f, 0xfb, 0x3a, 0x19, 0x7e, 0x18, 0x51, 0xf6, 0xab, 0x6b,
	0xed, 0x59, 0xfb, 0x6d, 0xbc, 0x13, 0x2c, 0x41, 0x47, 0xea, 0x02, 0xed, 0x83, 0xc3, 0x19, 0xa1,
	0x4c, 0xf8, 0x59, 0x14, 0x4a, 0x5f, 0xce, 0x92, 0x3c, 0x69, 0x6d, 0xdc, 0xc9, 0xed, 0xa7, 0x51,
	0x28, 0x4f, 0x66, 0x09, 0x43, 0xb7, 0xc1, 0x0e, 0xe2, 0x2c, 0x92, 0x3a, 0x3b, 0x6d, 0x9c, 0x1f,
	0xbc, 0xbf, 0xaa, 0xd0, 0x54, 0x90, 0x51, 0xf4, 0x26, 0x46, 0xf7, 0xe0, 0xd6, 0xc2, 0x4b, 0x1e,
	0xb2, 0x99, 0x15, 0xfc, 0x2f, 0xa0, 0x9b, 0x70, 0x32, 0x63, 0xc2, 0x17, 0x8c, 0x13, 0x19, 0x5e,
	0xcc, 0x03, 0xe5, 0x66, 0x6c, 0xac, 0xe8, 0x2e, 0x34, 0xce, 0x19, 0xe1, 0xf2, 0x5c, 0x47, 0xb2,
	0xb1, 0x39, 0x21, 0x17, 0xb6, 0xd2, 0xf3, 0x90, 0x71, 0x9a, 0xea, 0x64, 0xdb, 0xb8, 0x38, 0x2a,
	0x06, 0x8b, 0x98, 0x98, 0xcc, 0x74, 0x32, 0x6d, 0x6c, 0x4e, 0xa8, 0x0f, 0x77, 0xa4, 0x20, 0x51,
	0x9a, 0xc4, 0x42, 0xfa, 0x29, 0x8f, 0x65, 0xea, 0x4b, 0xf2, 0x96, 0x45, 0x6e, 0x43, 0xc3, 0x76,
	0xe7, 0x97, 0x63, 0x75, 0x77, 0xa2, 0xae, 0xd0, 0x03, 0xe8, 0x9c, 0x65, 0x21, 0xa7, 0x7e, 0x22,
	0xe2, 0x89, 0x60, 0x69, 0xea, 0x6e, 0xed, 0x59, 0xfb, 0x55, 0xdc, 0xd6, 0xd6, 0x63, 0x63, 0x44,
	0x0f, 0xa1, 0x41, 0x28, 0xf5, 0xe3, 0xc8, 0x6d, 0xea, 0xfa, 0xb9, 0xe5, 0xfa, 0x15, 0x49, 0xc1,
	0x36, 0xa1, 0xf4, 0x28, 0xf2, 0xbe, 0x85, 0xd6, 0x52, 0xd7, 0xa1, 0xaf, 0xa0, 0xae, 0x32, 0xa3,
	0xb3, 0xb4, 0x89, 0xad, 0x51, 0xde, 0x53, 0x80, 0x45, 0xf3, 0xa1, 0x1e, 0xd8, 0xca, 0x5a, 0x68,
	0x62, 0x43, 0x68, 0x0d, 0xf3, 0xfe, 0xb4, 0x00, 0x16, 0x7d, 0xf8, 0x7e, 0xa1, 0xd1, 0x37, 0x00,
	0x09, 0x49, 0x53, 0x16, 0x4d, 0x98, 0x48, 0xdd, 0xea, 0x35, 0x11, 0x97, 0xb0, 0xaa, 0xe0, 0x79,
	0xce, 0xc9, 0x05, 0x09, 0x39, 0x39, 0xe3, 0xcc, 0x14, 0xb4, 0xa3, 0xcd, 0x83, 0xc2, 0xea, 0xfd,
	0x06, 0xdd, 0x52, 0xb7, 0xbf, 0xe7, 0x1b, 0x9f, 0x40, 0x2b, 0xaf, 0xd9, 0x2f, 0x19, 0xcb, 0xd8,
	0xf5, 0x8f, 0xd4, 0xe0, 0x9f, 0x14, 0xd6, 0xfb, 0xd7, 0x86, 0xe6, 0x20, 0x30, 0xd3, 0x66, 0x04,
	0xed, 0x15, 0xf1, 0x98, 0xf0, 0x5e, 0xd9, 0x53, 0x4e, 0x58, 0xd6, 0xdd, 0xb0, 0x82, 0xb7, 0x97,
	0xc5, 0x85, 0x0e, 0xa1, 0x95, 0x32, 0xce, 0x02, 0xe9, 0x13, 0x31, 0x9d, 0x99, 0x39, 0xb4, 0xb7,
	0xde, 0xd1, 0x58, 0x03, 0x07, 0x62, 0x3a, 0x53, 0x2a, 0x4f, 0xe7, 0x27, 0x34, 0x86, 0x1d, 0xe3,
	0xe4, 0x1d, 0x11, 0x89, 0x3f, 0x21, 0x92, 0xa5, 0x66, 0x38, 0x3d, 0xd8, 0xe4, 0xea, 0x35, 0x11,
	0xc9, 0x0b, 0x05, 0x1e, 0x56, 0x70, 0x37, 0x5d, 0x35, 0xa1, 0xe7, 0xb0, 0x6d, 0x9c, 0x72, 0x22,
	0x2e, 0x88, 0x19, 0x5c, 0x9f, 0x6e, 0xf2, 0xf7, 0xa3, 0x02, 0x0e, 0x2b, 0xd8, 0xfc, 0x92, 0x3e,
	0xa2, 0x57, 0x80, 0x8c, 0x9f, 0x90, 0x72, 0xe6, 0xbf, 0x8b, 0xc5, 0x5b, 0x26, 0xcc, 0x34, 0xfb,
	0x7c, 0x93, 0xb7, 0x11, 0xe5, 0xec, 0xb5, 0x46, 0x0f, 0x2b, 0xd8, 0x49, 0x4b, 0x36, 0x95, 0x39,
	0x3d, 0x5a, 0x7d, 0x3d, 0xe0, 0xb4, 0x54, 0xaf, 0xcc, 0xdc, 0xca, 0x44, 0x86, 0xe9, 0x42, 0x22,
	0x23, 0x68, 0xe9, 0x59, 0x6b, 0x9c, 0x6c, 0x6d, 0x7a, 0xd5, 0x42, 0x1a, 0xa7, 0x11, 0x8f, 0x09,
	0x55, 0xae, 0x82, 0x85, 0x5c, 0x08, 0x38, 0x8b, 0xc1, 0x6b, 0xfc, 0xe5, 0x9a, 0x7f, 0xb4, 0xde,
	0x5f, 0xa9, 0x97, 0x31, 0x9b, 0xc6, 0x17, 0xec, 0xb9, 0x88, 0xa7, 0xba, 0xe3, 0x54, 0x49, 0x92,
	0x52, 0xb7, 0x1f, 0x41, 0x57, 0xc6, 0x93, 0x09, 0x67, 0x3e, 0xc9, 0x64, 0x1c, 0x90, 0x54, 0xba,
	0xb7, 0x74, 0x84, 0xfb, 0xeb, 0x23, 0x9c, 0x68, 0xf0, 0xc0, 0x60, 0x87, 0x15, 0xdc, 0x91, 0x2b,
	0x96, 0x67, 0x4d, 0x68, 0x10, 0x8d, 0xf4, 0xfe, 0xb3, 0x00, 0x5d, 0x6e, 0x57, 0xf4, 0xb2, 0x00,
	0xe8, 0x16, 0xef, 0xf4, 0x0f, 0xae, 0x6f, 0xf1, 0x95, 0x55, 0x9b, 0x5f, 0x63, 0xe3, 0xe4, 0xaa,
	0xad, 0x53, 0xbd, 0x62, 0xeb, 0x78, 0x3f, 0x03, 0xba, 0xec, 0x0d, 0x01, 0x34, 0x30, 0x0b, 0x08,
	0xe7, 0x8e, 0x85, 0xb6, 0xa0, 0x36, 0x66, 0xd2, 0xa9, 0x2a, 0xe3, 0x20, 0x49, 0x58, 0x44, 0x9d,
	0x1a, 0xea, 0x42, 0x6b, 0xcc, 0xe4, 0x20, 0xa2, 0x63, 0xc9, 0x08, 0x77, 0xea, 0x08, 0x41, 0x27,
	0xbf, 0x9c, 0xdb, 0x6c, 0xef, 0x31, 0x38, 0x65, 0x59, 0xa1, 0xcf, 0xa0, 0x9d, 0xf7, 0x99, 0x2a,
	0x21, 0xa1, 0x54, 0xff, 0x75, 0x13, 0x6f, 0xcf, 0x8d, 0x03, 0x4a, 0xbd, 0xa7, 0x70, 0x67, 0xad,
	0x88, 0x6e, 0xc6, 0xde, 0x85, 0x9d, 0x4b, 0x92, 0xf1, 0xfe, 0xb0, 0xe0, 0xee, 0xfa, 0xd6, 0x47,
	0xdf, 0x41, 0x7d, 0xbe, 0x26, 0x3b, 0xfd, 0x2f, 0x6f, 0x26, 0x98, 0x9e, 0xda, 0xa4, 0x58, 0x13,
	0xbd, 0xaf, 0xa1, 0xae, 0xf7, 0xaa, 0xc9, 0x94, 0x4e, 0xd9, 0x80, 0x52, 0xa7, 0xaa, 0x3f, 0x38,
	0x77, 0x6a, 0x3a, 0x77, 0x94, 0xaa, 0xef, 0xba, 0xf7, 0x8f, 0x55, 0xe4, 0x65, 0x69, 0x93, 0x3c,
	0x59, 0x79, 0xc4, 0x83, 0xeb, 0x44, 0xb6, 0x14, 0x1e, 0x7d, 0x0c, 0xa0, 0x77, 0xfd, 0xa2, 0xd2,
	0x36, 0xd6, 0xdb, 0x3f, 0xaf, 0xf0, 0x2b, 0xf3, 0x3a, 0x07, 0xb6, 0xf3, 0xb5, 0x97, 0xff, 0x8a,
	0x63, 0x29, 0xcb, 0xf7, 0x2c, 0x4f, 0x9d, 0x9a, 0xc8, 0x4e, 0x15, 0xed, 0x42, 0xd7, 0xd4, 0x8a,
	0xf3, 0xa3, 0x37, 0x8a, 0xe6, 0xd4, 0xd0, 0x1d, 0xd8, 0x29, 0x60, 0x0b, 0x73, 0xdd, 0x7b, 0x5c,
	0x24, 0xb4, 0xac, 0xda, 0xd2, 0x83, 0xac, 0xf2, 0x83, 0x7e, 0x80, 0xfb, 0x37, 0x91, 0xe7, 0x75,
	0x6e, 0x0e, 0xe0, 0xf6, 0x3a, 0x0d, 0x2a, 0x1a, 0x39, 0x0b, 0x79, 0x28, 0x67, 0x7e, 0x48, 0x0b,
	0x9a, 0xb1, 0x8c, 0xe8, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x48, 0x59, 0x25, 0x3a, 0x05, 0x0b,
	0x00, 0x00,
}
